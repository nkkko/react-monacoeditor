{"version":3,"file":"static/js/monaco-editor-vendor.80c937b5.a8ff3805.js","mappings":"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","sources":["../../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../../node_modules/monaco-editor/esm/vs/platform/telemetry/common/telemetry.js","../../node_modules/monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js","../../node_modules/monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js","../../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../node_modules/monaco-editor/esm/vs/platform/theme/common/iconRegistry.js","../../node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","../../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedo.js","../../node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js","../../node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js","../../node_modules/monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js"],"sourcesContent":["import { Emitter, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, Storage, StorageHint } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n(function (WillSaveStateReason) {\n    /**\n     * No specific reason to save state.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * A hint that the workbench is about to shutdown.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\nexport function loadKeyTargets(storage) {\n    const keysRaw = storage.get(TARGET_KEY);\n    if (keysRaw) {\n        try {\n            return JSON.parse(keysRaw);\n        }\n        catch (error) {\n            // Fail gracefully\n        }\n    }\n    return Object.create(null);\n}\nexport class AbstractStorageService extends Disposable {\n    constructor(options = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n        super();\n        this.options = options;\n        this._onDidChangeValue = this._register(new PauseableEmitter());\n        this.onDidChangeValue = this._onDidChangeValue.event;\n        this._onDidChangeTarget = this._register(new PauseableEmitter());\n        this._onWillSaveState = this._register(new Emitter());\n        this.onWillSaveState = this._onWillSaveState.event;\n        this._workspaceKeyTargets = undefined;\n        this._profileKeyTargets = undefined;\n        this._applicationKeyTargets = undefined;\n    }\n    emitDidChangeValue(scope, key) {\n        // Specially handle `TARGET_KEY`\n        if (key === TARGET_KEY) {\n            // Clear our cached version which is now out of date\n            switch (scope) {\n                case -1 /* StorageScope.APPLICATION */:\n                    this._applicationKeyTargets = undefined;\n                    break;\n                case 0 /* StorageScope.PROFILE */:\n                    this._profileKeyTargets = undefined;\n                    break;\n                case 1 /* StorageScope.WORKSPACE */:\n                    this._workspaceKeyTargets = undefined;\n                    break;\n            }\n            // Emit as `didChangeTarget` event\n            this._onDidChangeTarget.fire({ scope });\n        }\n        // Emit any other key to outside\n        else {\n            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key] });\n        }\n    }\n    get(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.get(key, fallbackValue);\n    }\n    getBoolean(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getBoolean(key, fallbackValue);\n    }\n    getNumber(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getNumber(key, fallbackValue);\n    }\n    store(key, value, scope, target) {\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            this.remove(key, scope);\n            return;\n        }\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, target);\n            // Store actual value\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(key, value);\n        });\n    }\n    remove(key, scope) {\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, undefined);\n            // Remove actual key\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.delete(key);\n        });\n    }\n    withPausedEmitters(fn) {\n        // Pause emitters\n        this._onDidChangeValue.pause();\n        this._onDidChangeTarget.pause();\n        try {\n            fn();\n        }\n        finally {\n            // Resume emitters\n            this._onDidChangeValue.resume();\n            this._onDidChangeTarget.resume();\n        }\n    }\n    updateKeyTarget(key, scope, target) {\n        var _a, _b;\n        // Add\n        const keyTargets = this.getKeyTargets(scope);\n        if (typeof target === 'number') {\n            if (keyTargets[key] !== target) {\n                keyTargets[key] = target;\n                (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(TARGET_KEY, JSON.stringify(keyTargets));\n            }\n        }\n        // Remove\n        else {\n            if (typeof keyTargets[key] === 'number') {\n                delete keyTargets[key];\n                (_b = this.getStorage(scope)) === null || _b === void 0 ? void 0 : _b.set(TARGET_KEY, JSON.stringify(keyTargets));\n            }\n        }\n    }\n    get workspaceKeyTargets() {\n        if (!this._workspaceKeyTargets) {\n            this._workspaceKeyTargets = this.loadKeyTargets(1 /* StorageScope.WORKSPACE */);\n        }\n        return this._workspaceKeyTargets;\n    }\n    get profileKeyTargets() {\n        if (!this._profileKeyTargets) {\n            this._profileKeyTargets = this.loadKeyTargets(0 /* StorageScope.PROFILE */);\n        }\n        return this._profileKeyTargets;\n    }\n    get applicationKeyTargets() {\n        if (!this._applicationKeyTargets) {\n            this._applicationKeyTargets = this.loadKeyTargets(-1 /* StorageScope.APPLICATION */);\n        }\n        return this._applicationKeyTargets;\n    }\n    getKeyTargets(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationKeyTargets;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileKeyTargets;\n            default:\n                return this.workspaceKeyTargets;\n        }\n    }\n    loadKeyTargets(scope) {\n        const storage = this.getStorage(scope);\n        return storage ? loadKeyTargets(storage) : Object.create(null);\n    }\n}\nAbstractStorageService.DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\nexport class InMemoryStorageService extends AbstractStorageService {\n    constructor() {\n        super();\n        this.applicationStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.profileStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this._register(this.workspaceStorage.onDidChangeStorage(key => this.emitDidChangeValue(1 /* StorageScope.WORKSPACE */, key)));\n        this._register(this.profileStorage.onDidChangeStorage(key => this.emitDidChangeValue(0 /* StorageScope.PROFILE */, key)));\n        this._register(this.applicationStorage.onDidChangeStorage(key => this.emitDidChangeValue(-1 /* StorageScope.APPLICATION */, key)));\n    }\n    getStorage(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationStorage;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileStorage;\n            default:\n                return this.workspaceStorage;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ITelemetryService = createDecorator('telemetryService');\n","import { keybindingLabelBackground, keybindingLabelBorder, keybindingLabelBottomBorder, keybindingLabelForeground, asCssVariable, widgetShadow, buttonForeground, buttonSeparator, buttonBackground, buttonHoverBackground, buttonSecondaryForeground, buttonSecondaryBackground, buttonSecondaryHoverBackground, buttonBorder, progressBarBackground, inputActiveOptionBorder, inputActiveOptionForeground, inputActiveOptionBackground, editorWidgetBackground, editorWidgetForeground, contrastBorder, checkboxBorder, checkboxBackground, checkboxForeground, problemsErrorIconForeground, problemsWarningIconForeground, problemsInfoIconForeground, inputBackground, inputForeground, inputBorder, textLinkForeground, inputValidationInfoBorder, inputValidationInfoBackground, inputValidationInfoForeground, inputValidationWarningBorder, inputValidationWarningBackground, inputValidationWarningForeground, inputValidationErrorBorder, inputValidationErrorBackground, inputValidationErrorForeground, listFilterWidgetBackground, listFilterWidgetNoMatchesOutline, listFilterWidgetOutline, listFilterWidgetShadow, badgeBackground, badgeForeground, breadcrumbsBackground, breadcrumbsForeground, breadcrumbsFocusForeground, breadcrumbsActiveSelectionForeground, activeContrastBorder, listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground, listDropBackground, listFocusAndSelectionOutline, listFocusBackground, listFocusForeground, listFocusOutline, listHoverBackground, listHoverForeground, listInactiveFocusBackground, listInactiveFocusOutline, listInactiveSelectionBackground, listInactiveSelectionForeground, listInactiveSelectionIconForeground, tableColumnsBorder, tableOddRowsBackgroundColor, treeIndentGuidesStroke, asCssVariableWithDefault, editorWidgetBorder, focusBorder, pickerGroupForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, selectBackground, selectBorder, selectForeground, selectListBackground, treeInactiveIndentGuidesStroke, menuBorder, menuForeground, menuBackground, menuSelectionForeground, menuSelectionBackground, menuSelectionBorder, menuSeparatorBackground, scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../common/colorRegistry.js';\nimport { Color } from '../../../base/common/color.js';\nfunction overrideStyles(override, styles) {\n    const result = Object.assign({}, styles);\n    for (const key in override) {\n        const val = override[key];\n        result[key] = val !== undefined ? asCssVariable(val) : undefined;\n    }\n    return result;\n}\nexport const defaultKeybindingLabelStyles = {\n    keybindingLabelBackground: asCssVariable(keybindingLabelBackground),\n    keybindingLabelForeground: asCssVariable(keybindingLabelForeground),\n    keybindingLabelBorder: asCssVariable(keybindingLabelBorder),\n    keybindingLabelBottomBorder: asCssVariable(keybindingLabelBottomBorder),\n    keybindingLabelShadow: asCssVariable(widgetShadow)\n};\nexport const defaultButtonStyles = {\n    buttonForeground: asCssVariable(buttonForeground),\n    buttonSeparator: asCssVariable(buttonSeparator),\n    buttonBackground: asCssVariable(buttonBackground),\n    buttonHoverBackground: asCssVariable(buttonHoverBackground),\n    buttonSecondaryForeground: asCssVariable(buttonSecondaryForeground),\n    buttonSecondaryBackground: asCssVariable(buttonSecondaryBackground),\n    buttonSecondaryHoverBackground: asCssVariable(buttonSecondaryHoverBackground),\n    buttonBorder: asCssVariable(buttonBorder),\n};\nexport const defaultProgressBarStyles = {\n    progressBarBackground: asCssVariable(progressBarBackground)\n};\nexport const defaultToggleStyles = {\n    inputActiveOptionBorder: asCssVariable(inputActiveOptionBorder),\n    inputActiveOptionForeground: asCssVariable(inputActiveOptionForeground),\n    inputActiveOptionBackground: asCssVariable(inputActiveOptionBackground)\n};\nexport const defaultCheckboxStyles = {\n    checkboxBackground: asCssVariable(checkboxBackground),\n    checkboxBorder: asCssVariable(checkboxBorder),\n    checkboxForeground: asCssVariable(checkboxForeground)\n};\nexport const defaultDialogStyles = {\n    dialogBackground: asCssVariable(editorWidgetBackground),\n    dialogForeground: asCssVariable(editorWidgetForeground),\n    dialogShadow: asCssVariable(widgetShadow),\n    dialogBorder: asCssVariable(contrastBorder),\n    errorIconForeground: asCssVariable(problemsErrorIconForeground),\n    warningIconForeground: asCssVariable(problemsWarningIconForeground),\n    infoIconForeground: asCssVariable(problemsInfoIconForeground),\n    textLinkForeground: asCssVariable(textLinkForeground)\n};\nexport const defaultInputBoxStyles = {\n    inputBackground: asCssVariable(inputBackground),\n    inputForeground: asCssVariable(inputForeground),\n    inputBorder: asCssVariable(inputBorder),\n    inputValidationInfoBorder: asCssVariable(inputValidationInfoBorder),\n    inputValidationInfoBackground: asCssVariable(inputValidationInfoBackground),\n    inputValidationInfoForeground: asCssVariable(inputValidationInfoForeground),\n    inputValidationWarningBorder: asCssVariable(inputValidationWarningBorder),\n    inputValidationWarningBackground: asCssVariable(inputValidationWarningBackground),\n    inputValidationWarningForeground: asCssVariable(inputValidationWarningForeground),\n    inputValidationErrorBorder: asCssVariable(inputValidationErrorBorder),\n    inputValidationErrorBackground: asCssVariable(inputValidationErrorBackground),\n    inputValidationErrorForeground: asCssVariable(inputValidationErrorForeground)\n};\nexport const defaultFindWidgetStyles = {\n    listFilterWidgetBackground: asCssVariable(listFilterWidgetBackground),\n    listFilterWidgetOutline: asCssVariable(listFilterWidgetOutline),\n    listFilterWidgetNoMatchesOutline: asCssVariable(listFilterWidgetNoMatchesOutline),\n    listFilterWidgetShadow: asCssVariable(listFilterWidgetShadow),\n    inputBoxStyles: defaultInputBoxStyles,\n    toggleStyles: defaultToggleStyles\n};\nexport const defaultCountBadgeStyles = {\n    badgeBackground: asCssVariable(badgeBackground),\n    badgeForeground: asCssVariable(badgeForeground),\n    badgeBorder: asCssVariable(contrastBorder)\n};\nexport const defaultBreadcrumbsWidgetStyles = {\n    breadcrumbsBackground: asCssVariable(breadcrumbsBackground),\n    breadcrumbsForeground: asCssVariable(breadcrumbsForeground),\n    breadcrumbsHoverForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusAndSelectionForeground: asCssVariable(breadcrumbsActiveSelectionForeground)\n};\nexport const defaultListStyles = {\n    listBackground: undefined,\n    listInactiveFocusForeground: undefined,\n    listFocusBackground: asCssVariable(listFocusBackground),\n    listFocusForeground: asCssVariable(listFocusForeground),\n    listFocusOutline: asCssVariable(listFocusOutline),\n    listActiveSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listActiveSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listActiveSelectionIconForeground: asCssVariable(listActiveSelectionIconForeground),\n    listFocusAndSelectionOutline: asCssVariable(listFocusAndSelectionOutline),\n    listFocusAndSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listFocusAndSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listInactiveSelectionBackground: asCssVariable(listInactiveSelectionBackground),\n    listInactiveSelectionIconForeground: asCssVariable(listInactiveSelectionIconForeground),\n    listInactiveSelectionForeground: asCssVariable(listInactiveSelectionForeground),\n    listInactiveFocusBackground: asCssVariable(listInactiveFocusBackground),\n    listInactiveFocusOutline: asCssVariable(listInactiveFocusOutline),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listDropBackground: asCssVariable(listDropBackground),\n    listSelectionOutline: asCssVariable(activeContrastBorder),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    treeIndentGuidesStroke: asCssVariable(treeIndentGuidesStroke),\n    treeInactiveIndentGuidesStroke: asCssVariable(treeInactiveIndentGuidesStroke),\n    tableColumnsBorder: asCssVariable(tableColumnsBorder),\n    tableOddRowsBackgroundColor: asCssVariable(tableOddRowsBackgroundColor),\n};\nexport function getListStyles(override) {\n    return overrideStyles(override, defaultListStyles);\n}\nexport const defaultSelectBoxStyles = {\n    selectBackground: asCssVariable(selectBackground),\n    selectListBackground: asCssVariable(selectListBackground),\n    selectForeground: asCssVariable(selectForeground),\n    decoratorRightForeground: asCssVariable(pickerGroupForeground),\n    selectBorder: asCssVariable(selectBorder),\n    focusBorder: asCssVariable(focusBorder),\n    listFocusBackground: asCssVariable(quickInputListFocusBackground),\n    listInactiveSelectionIconForeground: asCssVariable(quickInputListFocusIconForeground),\n    listFocusForeground: asCssVariable(quickInputListFocusForeground),\n    listFocusOutline: asCssVariableWithDefault(activeContrastBorder, Color.transparent.toString()),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    selectListBorder: asCssVariable(editorWidgetBorder),\n    listBackground: undefined,\n    listActiveSelectionBackground: undefined,\n    listActiveSelectionForeground: undefined,\n    listActiveSelectionIconForeground: undefined,\n    listFocusAndSelectionBackground: undefined,\n    listDropBackground: undefined,\n    listInactiveSelectionBackground: undefined,\n    listInactiveSelectionForeground: undefined,\n    listInactiveFocusBackground: undefined,\n    listInactiveFocusOutline: undefined,\n    listSelectionOutline: undefined,\n    listFocusAndSelectionForeground: undefined,\n    listFocusAndSelectionOutline: undefined,\n    listInactiveFocusForeground: undefined,\n    tableColumnsBorder: undefined,\n    tableOddRowsBackgroundColor: undefined,\n    treeIndentGuidesStroke: undefined,\n    treeInactiveIndentGuidesStroke: undefined,\n};\nexport const defaultMenuStyles = {\n    shadowColor: asCssVariable(widgetShadow),\n    borderColor: asCssVariable(menuBorder),\n    foregroundColor: asCssVariable(menuForeground),\n    backgroundColor: asCssVariable(menuBackground),\n    selectionForegroundColor: asCssVariable(menuSelectionForeground),\n    selectionBackgroundColor: asCssVariable(menuSelectionBackground),\n    selectionBorderColor: asCssVariable(menuSelectionBorder),\n    separatorColor: asCssVariable(menuSeparatorBackground),\n    scrollbarShadow: asCssVariable(scrollbarShadow),\n    scrollbarSliderBackground: asCssVariable(scrollbarSliderBackground),\n    scrollbarSliderHoverBackground: asCssVariable(scrollbarSliderHoverBackground),\n    scrollbarSliderActiveBackground: asCssVariable(scrollbarSliderActiveBackground)\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nexport function getIconsStyleSheet(themeService) {\n    const onDidChangeEmmiter = new Emitter();\n    const iconRegistry = getIconRegistry();\n    iconRegistry.onDidChange(() => onDidChangeEmmiter.fire());\n    themeService === null || themeService === void 0 ? void 0 : themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire());\n    return {\n        onDidChange: onDidChangeEmmiter.event,\n        getCSS() {\n            const productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n            const usedFontIds = {};\n            const formatIconRule = (contribution) => {\n                const definition = productIconTheme.getIcon(contribution);\n                if (!definition) {\n                    return undefined;\n                }\n                const fontContribution = definition.font;\n                if (fontContribution) {\n                    usedFontIds[fontContribution.id] = fontContribution.definition;\n                    return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`;\n                }\n                // default font (codicon)\n                return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n            };\n            const rules = [];\n            for (const contribution of iconRegistry.getIcons()) {\n                const rule = formatIconRule(contribution);\n                if (rule) {\n                    rules.push(rule);\n                }\n            }\n            for (const id in usedFontIds) {\n                const definition = usedFontIds[id];\n                const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n                const fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n                const src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n                rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n            }\n            return rules.join('\\n');\n        }\n    };\n}\nexport class UnthemedProductIconTheme {\n    getIcon(contribution) {\n        const iconRegistry = getIconRegistry();\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#D7BA7D', hcLight: '#292929' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', { dark: transparent(buttonForeground, .4), light: transparent(buttonForeground, .4), hcDark: transparent(buttonForeground, .4), hcLight: transparent(buttonForeground, .4) }, nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Sticky scroll\n */\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', \"Sticky scroll background color for the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Sticky scroll on hover background color for the editor\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Search Viewlet colors.\n */\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: badgeForeground, light: badgeForeground, hcDark: Color.black, hcLight: badgeForeground }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .8), light: transparent(badgeBackground, .6), hcDark: '#f38518', hcLight: badgeBackground }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', { dark: '#000000', light: '#e4e4e4', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedRegionBackground', \"The color of unchanged blocks in diff editor.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', { dark: transparent(treeIndentGuidesStroke, 0.4), light: transparent(treeIndentGuidesStroke, 0.4), hcDark: transparent(treeIndentGuidesStroke, 0.4), hcLight: transparent(treeIndentGuidesStroke, 0.4) }, nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Checkboxes\n */\nexport const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', { dark: iconForeground, light: iconForeground, hcDark: iconForeground, hcLight: iconForeground }, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hcDark: Color.fromHex('#000f'), hcLight: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hcDark: transparent(scrollbarSliderBackground, 0.5), hcLight: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hcDark: transparent(scrollbarSliderHoverBackground, 0.5), hcLight: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hcDark: transparent(scrollbarSliderActiveBackground, 0.5), hcLight: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c, _d;\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return (_d = resolveColorValue(transform.value, theme)) === null || _d === void 0 ? void 0 : _d.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon, getCodiconFontCharacters } from '../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n//  ------ API types\n// icon registry\nexport const Extensions = {\n    IconContribution: 'base.contributions.icons'\n};\nexport var IconContribution;\n(function (IconContribution) {\n    function getDefinition(contribution, registry) {\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n    IconContribution.getDefinition = getDefinition;\n})(IconContribution || (IconContribution = {}));\nexport var IconFontDefinition;\n(function (IconFontDefinition) {\n    function toJSONObject(iconFont) {\n        return {\n            weight: iconFont.weight,\n            style: iconFont.style,\n            src: iconFont.src.map(s => ({ format: s.format, location: s.location.toString() }))\n        };\n    }\n    IconFontDefinition.toJSONObject = toJSONObject;\n    function fromJSONObject(json) {\n        const stringOrUndef = (s) => isString(s) ? s : undefined;\n        if (json && Array.isArray(json.src) && json.src.every((s) => isString(s.format) && isString(s.location))) {\n            return {\n                weight: stringOrUndef(json.weight),\n                style: stringOrUndef(json.style),\n                src: json.src.map((s) => ({ format: s.format, location: URI.parse(s.location) }))\n            };\n        }\n        return undefined;\n    }\n    IconFontDefinition.fromJSONObject = fromJSONObject;\n})(IconFontDefinition || (IconFontDefinition = {}));\nclass IconRegistry {\n    constructor() {\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.iconSchema = {\n            definitions: {\n                icons: {\n                    type: 'object',\n                    properties: {\n                        fontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },\n                        fontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }\n                    },\n                    additionalProperties: false,\n                    defaultSnippets: [{ body: { fontCharacter: '\\\\\\\\e030' } }]\n                }\n            },\n            type: 'object',\n            properties: {}\n        };\n        this.iconReferenceSchema = { type: 'string', pattern: `^${ThemeIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };\n        this.iconsById = {};\n        this.iconFontsById = {};\n    }\n    registerIcon(id, defaults, description, deprecationMessage) {\n        const existing = this.iconsById[id];\n        if (existing) {\n            if (description && !existing.description) {\n                existing.description = description;\n                this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n                const enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n                if (enumIndex !== -1) {\n                    this.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n                }\n                this._onDidChange.fire();\n            }\n            return existing;\n        }\n        const iconContribution = { id, description, defaults, deprecationMessage };\n        this.iconsById[id] = iconContribution;\n        const propertySchema = { $ref: '#/definitions/icons' };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (description) {\n            propertySchema.markdownDescription = `${description}: $(${id})`;\n        }\n        this.iconSchema.properties[id] = propertySchema;\n        this.iconReferenceSchema.enum.push(id);\n        this.iconReferenceSchema.enumDescriptions.push(description || '');\n        this._onDidChange.fire();\n        return { id };\n    }\n    getIcons() {\n        return Object.keys(this.iconsById).map(id => this.iconsById[id]);\n    }\n    getIcon(id) {\n        return this.iconsById[id];\n    }\n    getIconSchema() {\n        return this.iconSchema;\n    }\n    toString() {\n        const sorter = (i1, i2) => {\n            return i1.id.localeCompare(i2.id);\n        };\n        const classNames = (i) => {\n            while (ThemeIcon.isThemeIcon(i.defaults)) {\n                i = this.iconsById[i.defaults.id];\n            }\n            return `codicon codicon-${i ? i.id : ''}`;\n        };\n        const reference = [];\n        reference.push(`| preview     | identifier                        | default codicon ID                | description`);\n        reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n        const contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n        for (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n        }\n        reference.push(`| preview     | identifier                        `);\n        reference.push(`| ----------- | --------------------------------- |`);\n        for (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n        }\n        return reference.join('\\n');\n    }\n}\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\nexport function registerIcon(id, defaults, description, deprecationMessage) {\n    return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\nexport function getIconRegistry() {\n    return iconRegistry;\n}\nfunction initialize() {\n    const codiconFontCharacters = getCodiconFontCharacters();\n    for (const icon in codiconFontCharacters) {\n        const fontCharacter = '\\\\' + codiconFontCharacters[icon].toString(16);\n        iconRegistry.registerIcon(icon, { fontCharacter });\n    }\n}\ninitialize();\nexport const iconsSchemaId = 'vscode://schemas/icons';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n//setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n// common icons\nexport const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));\nexport const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));\nexport const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));\nexport const syncing = ThemeIcon.modify(Codicon.sync, 'spin');\nexport const spinningLoading = ThemeIcon.modify(Codicon.loading, 'spin');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IUndoRedoService = createDecorator('undoRedoService');\nexport class ResourceEditStackSnapshot {\n    constructor(resource, elements) {\n        this.resource = resource;\n        this.elements = elements;\n    }\n}\nexport class UndoRedoGroup {\n    constructor() {\n        this.id = UndoRedoGroup._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoGroup._ID = 0;\nUndoRedoGroup.None = new UndoRedoGroup();\nexport class UndoRedoSource {\n    constructor() {\n        this.id = UndoRedoSource._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoSource._ID = 0;\nUndoRedoSource.None = new UndoRedoSource();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nexport let UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    _invokeWorkspacePrepare(element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof element.actual.prepareUndoRedo === 'undefined') {\n                return Disposable.None;\n            }\n            const result = element.actual.prepareUndoRedo();\n            if (typeof result === 'undefined') {\n                return Disposable.None;\n            }\n            return result;\n        });\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n                // this element can be split\n                let UndoChoice;\n                (function (UndoChoice) {\n                    UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                    UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                    UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n                })(UndoChoice || (UndoChoice = {}));\n                const { result } = yield this._dialogService.prompt({\n                    type: Severity.Info,\n                    message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                    buttons: [\n                        {\n                            label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                            run: () => UndoChoice.All\n                        },\n                        {\n                            label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n                            run: () => UndoChoice.This\n                        }\n                    ],\n                    cancelButton: {\n                        run: () => UndoChoice.Cancel\n                    }\n                });\n                if (result === UndoChoice.Cancel) {\n                    // choice: cancel\n                    return;\n                }\n                if (result === UndoChoice.This) {\n                    // choice: undo this file\n                    this._splitPastWorkspaceElement(element, null);\n                    return this._undo(strResource, 0, true);\n                }\n                // choice: undo in all files\n                // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n                const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n                if (verificationError1) {\n                    return verificationError1.returnValue;\n                }\n                undoConfirmed = true;\n            }\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError2) {\n                cleanup.dispose();\n                return verificationError2.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveBackward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    _confirmAndContinueUndo(strResource, sourceId, element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._dialogService.confirm({\n                message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n                primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n                cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n            });\n            if (!result.confirmed) {\n                return;\n            }\n            return this._undo(strResource, sourceId, true);\n        });\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError) {\n                cleanup.dispose();\n                return verificationError.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveForward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n    const singleFolderIdentifier = obj;\n    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n    const emptyWorkspaceIdentifier = obj;\n    return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string'\n        && !isSingleFolderWorkspaceIdentifier(obj)\n        && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n    // Empty workspace\n    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n        // With a backupPath, the basename is the empty workspace identifier\n        if (typeof arg0 === 'string') {\n            return {\n                id: basename(arg0)\n            };\n        }\n        // Extension development empty windows have backups disabled\n        // so we return a constant workspace identifier for extension\n        // authors to allow to restore their workspace state even then.\n        if (isExtensionDevelopment) {\n            return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n        }\n        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n    }\n    // Multi root\n    const workspace = arg0;\n    if (workspace.configuration) {\n        return {\n            id: workspace.id,\n            configPath: workspace.configuration\n        };\n    }\n    // Single folder\n    if (workspace.folders.length === 1) {\n        return {\n            id: workspace.id,\n            uri: workspace.folders[0].uri\n        };\n    }\n    // Empty window\n    return {\n        id: workspace.id\n    };\n}\nexport function isWorkspaceIdentifier(obj) {\n    const workspaceIdentifier = obj;\n    return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, \n    /**\n     * Provides access to the original metadata for this workspace\n     * folder. This can be different from the metadata provided in\n     * this class:\n     * - raw paths can be relative\n     * - raw paths are not normalized\n     */\n    raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceTrustManagementService = createDecorator('workspaceTrustManagementService');\n"],"names":["TARGET_KEY","IStorageService","createDecorator","WillSaveStateReason","AbstractStorageService","Disposable","constructor","options","arguments","length","undefined","flushInterval","DEFAULT_FLUSH_INTERVAL","super","this","_onDidChangeValue","_register","PauseableEmitter","onDidChangeValue","event","_onDidChangeTarget","_onWillSaveState","Emitter","onWillSaveState","_workspaceKeyTargets","_profileKeyTargets","_applicationKeyTargets","emitDidChangeValue","scope","key","fire","target","getKeyTargets","get","fallbackValue","_a","getStorage","getBoolean","getNumber","store","value","isUndefinedOrNull","remove","withPausedEmitters","updateKeyTarget","set","delete","fn","pause","resume","_b","keyTargets","JSON","stringify","workspaceKeyTargets","loadKeyTargets","profileKeyTargets","applicationKeyTargets","storage","keysRaw","parse","error","Object","create","InMemoryStorageService","applicationStorage","Storage","InMemoryStorageDatabase","hint","StorageHint","STORAGE_IN_MEMORY","profileStorage","workspaceStorage","onDidChangeStorage","ITelemetryService","defaultKeybindingLabelStyles","keybindingLabelBackground","asCssVariable","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","keybindingLabelShadow","widgetShadow","defaultButtonStyles","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","buttonBorder","defaultProgressBarStyles","progressBarBackground","defaultToggleStyles","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","defaultInputBoxStyles","checkboxBackground","checkboxBorder","checkboxForeground","editorWidgetBackground","editorWidgetForeground","contrastBorder","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","textLinkForeground","inputBackground","inputForeground","inputBorder","inputValidationInfoBorder","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationWarningBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationErrorBorder","inputValidationErrorBackground","inputValidationErrorForeground","defaultFindWidgetStyles","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","inputBoxStyles","toggleStyles","defaultCountBadgeStyles","badgeBackground","badgeForeground","badgeBorder","defaultListStyles","breadcrumbsBackground","breadcrumbsForeground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","listBackground","listInactiveFocusForeground","listFocusBackground","listFocusForeground","listFocusOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listFocusAndSelectionOutline","listFocusAndSelectionBackground","listFocusAndSelectionForeground","listInactiveSelectionBackground","listInactiveSelectionIconForeground","listInactiveSelectionForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","listSelectionOutline","activeContrastBorder","listHoverOutline","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","getListStyles","override","styles","result","assign","val","overrideStyles","defaultSelectBoxStyles","selectBackground","selectListBackground","selectForeground","decoratorRightForeground","pickerGroupForeground","selectBorder","focusBorder","quickInputListFocusBackground","quickInputListFocusIconForeground","quickInputListFocusForeground","asCssVariableWithDefault","Color","transparent","toString","selectListBorder","editorWidgetBorder","defaultMenuStyles","shadowColor","borderColor","menuBorder","foregroundColor","menuForeground","backgroundColor","menuBackground","selectionForegroundColor","menuSelectionForeground","selectionBackgroundColor","menuSelectionBackground","selectionBorderColor","menuSelectionBorder","separatorColor","menuSeparatorBackground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","getIconsStyleSheet","themeService","onDidChangeEmmiter","iconRegistry","getIconRegistry","onDidChange","onDidProductIconThemeChange","getCSS","productIconTheme","getProductIconTheme","UnthemedProductIconTheme","usedFontIds","formatIconRule","contribution","definition","getIcon","fontContribution","font","id","concat","fontCharacter","asCSSPropertyValue","rules","getIcons","rule","push","fontWeight","weight","fontStyle","style","src","map","l","asCSSUrl","location","format","join","defaults","ThemeIcon","isThemeIcon","c","asCssVariableName","colorIdent","replace","color","defaultCssValue","Extensions","ColorContribution","colorRegistry","_onDidChangeSchema","onDidChangeSchema","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","description","deprecationMessage","colorContribution","needsTransparency","propertySchema","defaultSnippets","body","getColors","keys","resolveDefaultColor","theme","colorDesc","resolveColorValue","getColorSchema","sort","sorter","a","b","cat1","indexOf","cat2","localeCompare","k","platform","add","foreground","dark","light","hcDark","hcLight","nls","errorForeground","iconForeground","black","white","widgetBorder","lighten","darken","fromHex","editorErrorForeground","editorErrorBorder","editorWarningForeground","editorWarningBorder","editorInfoForeground","editorInfoBorder","editorHintForeground","editorBackground","editorForeground","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","RGBA","pickerGroupBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverBackground","editorHoverBorder","editorActiveLinkForeground","blue","cyan","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffOverviewRulerInserted","diffOverviewRulerRemoved","diffDiagonalFill","listHighlightForeground","listFocusHighlightForeground","ifArg","thenArg","elseArg","op","if","then","else","_deprecatedQuickInputListFocusBackground","oneOf","toolbarHoverBackground","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","mergeCurrentHeaderBackground","mergeIncomingHeaderBackground","mergeCommonHeaderBackground","mergeBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapForegroundOpacity","colorValue","factor","_len","colorValues","Array","_key","values","backgroundColorValue","transparency","background","getColor","transform","_c","_d","makeOpaque","candidate","defines","from","isDarkerThan","getLighterColor","getDarkerColor","assertNever","executeTransform","workbenchColorsSchemaId","schemaRegistry","as","JSONExtensions","JSONContribution","registerSchema","delayer","RunOnceScheduler","notifySchemaChanged","isScheduled","schedule","IconContribution","IconFontDefinition","getDefinition","registry","toJSONObject","iconFont","s","fromJSONObject","json","stringOrUndef","isString","isArray","every","URI","_onDidChange","iconSchema","definitions","icons","fontId","localize","additionalProperties","iconReferenceSchema","pattern","iconNameExpression","iconsById","iconFontsById","registerIcon","existing","markdownDescription","enumIndex","iconContribution","$ref","getIconSchema","i1","i2","classNames","i","reference","contributions","filter","codiconFontCharacters","getCodiconFontCharacters","icon","initialize","iconsSchemaId","widgetClose","Codicon","close","arrowUp","arrowDown","modify","sync","loading","ColorScheme","isHighContrast","scheme","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","isDark","DARK","IThemeService","themeColorFromId","getThemeTypeSelector","ThemingContribution","themingRegistry","themingParticipants","onThemingParticipantAddedEmitter","onColorThemeChange","participant","toDisposable","idx","splice","getThemingParticipants","registerThemingParticipant","Themable","getColorTheme","onDidColorThemeChange","onThemeChange","updateStyles","IUndoRedoService","ResourceEditStackSnapshot","resource","elements","UndoRedoGroup","_ID","order","nextOrder","None","UndoRedoSource","__decorate","decorators","desc","d","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","apply","DEBUG","getResourceLabel","Schemas","file","fsPath","path","stackElementCounter","ResourceStackElement","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","label","confirmBeforeUndo","resourceLabels","strResources","isValid","setValid","name","ResourceReasonPair","reason","RemovedResources","Map","createMessage","externalRemoval","noParallelUniverses","element","messages","comment","size","has","WorkspaceStackElement","removedResources","invalidatedResources","canSplit","split","removeResource","ResourceEditStack","_past","_future","locked","versionId","dispose","flushAllElements","_setElementValidFlag","setElementsValidFlag","pushElement","futureElement","createSnapshot","len","restoreSnapshot","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","getElements","past","future","getClosestPastElement","getSecondClosestPastElement","getClosestFutureElement","hasPastElements","hasFutureElements","splitPastWorkspaceElement","toRemove","individualMap","j","splitFutureWorkspaceElement","moveBackward","pop","moveForward","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","getUriComparisonKey","uriComparisonKeyComputer","getComparisonKey","_print","console","log","str","group","source","_pushElement","seen","Set","resources","editStack","getLastElement","closestPastElement","_splitPastWorkspaceElement","ignoreResources","individualArr","_element","_splitFutureWorkspaceElement","removeElements","_findClosestUndoElementWithSource","matchedElement","matchedStrResource","canUndo","resourceOrSource","_onError","err","onUnexpectedError","_acquireLocks","editStackSnapshot","Error","_safeInvokeWithLocks","invoke","cleanup","continuation","releaseLocks","_invokeWorkspacePrepare","prepareUndoRedo","_invokeResourcePrepare","callback","isDisposable","disposable","_getAffectedEditStacks","affectedEditStacks","_tryToSplitAndUndo","message","warn","WorkspaceVerificationError","_undo","_checkWorkspaceUndo","checkInvalidatedResources","cannotUndoDueToResources","cannotLockDueToResources","_workspaceUndo","undoConfirmed","verificationError","returnValue","_confirmAndExecuteWorkspaceUndo","_isPartOfUndoGroup","pastElement","secondPastElement","UndoChoice","prompt","Severity","Info","buttons","run","All","This","cancelButton","Cancel","verificationError1","verificationError2","undo","_continueUndoInGroup","_resourceUndo","_findClosestUndoElementInGroup","_confirmAndContinueUndo","confirm","primaryButton","confirmed","_findClosestRedoElementWithSource","canRedo","_tryToSplitAndRedo","_redo","_checkWorkspaceRedo","cannotRedoDueToResources","_workspaceRedo","_executeWorkspaceRedo","redo","_continueRedoInGroup","_resourceRedo","_findClosestRedoElementInGroup","IDialogService","INotificationService","registerSingleton","IWorkspaceContextService","isSingleFolderWorkspaceIdentifier","obj","singleFolderIdentifier","isUri","uri","isEmptyWorkspaceIdentifier","workspaceIdentifier","configPath","isWorkspaceIdentifier","EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE","UNKNOWN_EMPTY_WINDOW_WORKSPACE","toWorkspaceIdentifier","arg0","isExtensionDevelopment","basename","workspace","configuration","folders","WorkspaceFolder","data","raw","index","toJSON","WORKSPACE_EXTENSION","STANDALONE_EDITOR_WORKSPACE_ID","isStandaloneEditorWorkspace","IWorkspaceTrustManagementService"],"sourceRoot":""}