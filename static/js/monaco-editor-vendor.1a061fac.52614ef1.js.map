{"version":3,"file":"static/js/monaco-editor-vendor.1a061fac.52614ef1.js","mappings":"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","sources":["../../node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/tokenizationTextModelPart.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/textModelPart.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","../../node_modules/monaco-editor/esm/vs/editor/common/model/utils.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    setValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = toUint32(startIndex);\n        count = toUint32(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        const maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    /**\n     * Returns the sum of the first `index + 1` many items.\n     * @returns `SUM(0 <= j <= index, values[j])`.\n     */\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum);\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nexport class ConstantTimePrefixSumComputer {\n    constructor(values) {\n        this._values = values;\n        this._isValid = false;\n        this._validEndIndex = -1;\n        this._prefixSum = [];\n        this._indexBySum = [];\n    }\n    /**\n     * @returns SUM(0 <= j < values.length, values[j])\n     */\n    getTotalSum() {\n        this._ensureValid();\n        return this._indexBySum.length;\n    }\n    /**\n     * Returns the sum of the first `count` many items.\n     * @returns `SUM(0 <= j < count, values[j])`.\n     */\n    getPrefixSum(count) {\n        this._ensureValid();\n        if (count === 0) {\n            return 0;\n        }\n        return this._prefixSum[count - 1];\n    }\n    /**\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n     */\n    getIndexOf(sum) {\n        this._ensureValid();\n        const idx = this._indexBySum[sum];\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n    }\n    removeValues(start, deleteCount) {\n        this._values.splice(start, deleteCount);\n        this._invalidate(start);\n    }\n    insertValues(insertIndex, insertArr) {\n        this._values = arrayInsert(this._values, insertIndex, insertArr);\n        this._invalidate(insertIndex);\n    }\n    _invalidate(index) {\n        this._isValid = false;\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n    }\n    _ensureValid() {\n        if (this._isValid) {\n            return;\n        }\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n            const value = this._values[i];\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n            this._prefixSum[i] = sumAbove + value;\n            for (let j = 0; j < value; j++) {\n                this._indexBySum[sumAbove + j] = i;\n            }\n        }\n        // trim things\n        this._prefixSum.length = this._values.length;\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n        // mark as valid\n        this._isValid = true;\n        this._validEndIndex = this._values.length - 1;\n    }\n    setValue(index, value) {\n        if (this._values[index] === value) {\n            // no change\n            return;\n        }\n        this._values[index] = value;\n        this._invalidate(index);\n    }\n}\nexport class PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeNode {\n    constructor(piece, color) {\n        this.piece = piece;\n        this.color = color;\n        this.size_left = 0;\n        this.lf_left = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n    }\n    next() {\n        if (this.right !== SENTINEL) {\n            return leftest(this.right);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.left === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    prev() {\n        if (this.left !== SENTINEL) {\n            return righttest(this.left);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.right === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new TreeNode(null, 0 /* NodeColor.Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* NodeColor.Black */;\nexport function leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nexport function righttest(node) {\n    while (node.right !== SENTINEL) {\n        node = node.right;\n    }\n    return node;\n}\nfunction calculateSize(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.size_left + node.piece.length + calculateSize(node.right);\n}\nfunction calculateLF(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n    const y = x.right;\n    // fix size_left\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    x.right = y.left;\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent;\n    if (x.parent === SENTINEL) {\n        tree.root = y;\n    }\n    else if (x.parent.left === x) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n}\nexport function rightRotate(tree, y) {\n    const x = y.left;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    // fix size_left\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    if (y.parent === SENTINEL) {\n        tree.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n}\nexport function rbDelete(tree, z) {\n    let x;\n    let y;\n    if (z.left === SENTINEL) {\n        y = z;\n        x = y.right;\n    }\n    else if (z.right === SENTINEL) {\n        y = z;\n        x = y.left;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n    }\n    if (y === tree.root) {\n        tree.root = x;\n        // if x is null, we are removing the only node\n        x.color = 0 /* NodeColor.Black */;\n        z.detach();\n        resetSentinel();\n        tree.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (y.color === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n        recomputeTreeMetadata(tree, x);\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        // as we make changes to x's hierarchy, update size_left of subtree first\n        recomputeTreeMetadata(tree, x);\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        y.color = z.color;\n        if (z === tree.root) {\n            tree.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n        // update metadata\n        // we replace z with y, so in this sub tree, the length change is z.item.length\n        y.size_left = z.size_left;\n        y.lf_left = z.lf_left;\n        recomputeTreeMetadata(tree, y);\n    }\n    z.detach();\n    if (x.parent.left === x) {\n        const newSizeLeft = calculateSize(x);\n        const newLFLeft = calculateLF(x);\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n            const delta = newSizeLeft - x.parent.size_left;\n            const lf_delta = newLFLeft - x.parent.lf_left;\n            x.parent.size_left = newSizeLeft;\n            x.parent.lf_left = newLFLeft;\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\n        }\n    }\n    recomputeTreeMetadata(tree, x.parent);\n    if (yWasRed) {\n        resetSentinel();\n        return;\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== tree.root && x.color === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent);\n                w = x.parent.right;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.right.color === 0 /* NodeColor.Black */) {\n                    w.left.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    rightRotate(tree, w);\n                    w = x.parent.right;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.right.color = 0 /* NodeColor.Black */;\n                leftRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent);\n                w = x.parent.left;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.left.color === 0 /* NodeColor.Black */) {\n                    w.right.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    leftRotate(tree, w);\n                    w = x.parent.left;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.left.color = 0 /* NodeColor.Black */;\n                rightRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n    }\n    x.color = 0 /* NodeColor.Black */;\n    resetSentinel();\n}\nexport function fixInsert(tree, x) {\n    recomputeTreeMetadata(tree, x);\n    while (x !== tree.root && x.parent.color === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent.parent);\n            }\n        }\n    }\n    tree.root.color = 0 /* NodeColor.Black */;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n    // node length change or line feed count change\n    while (x !== tree.root && x !== SENTINEL) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lineFeedCntDelta;\n        }\n        x = x.parent;\n    }\n}\nexport function recomputeTreeMetadata(tree, x) {\n    let delta = 0;\n    let lf_delta = 0;\n    if (x === tree.root) {\n        return;\n    }\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n        x = x.parent;\n    }\n    if (x === tree.root) {\n        // well, it means we add a node to the end (inorder)\n        return;\n    }\n    // x is the node whose right subtree is changed.\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n    // go upwards till root. O(logN)\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lf_delta;\n        }\n        x = x.parent;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { FindMatch } from '../../model.js';\nimport { SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from './rbTreeBase.js';\nimport { Searcher, createFindMatch, isValidMatch } from '../textModelSearch.js';\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\nconst AverageBufferSize = 65535;\nfunction createUintArray(arr) {\n    let r;\n    if (arr[arr.length - 1] < 65536) {\n        r = new Uint16Array(arr.length);\n    }\n    else {\n        r = new Uint32Array(arr.length);\n    }\n    r.set(arr, 0);\n    return r;\n}\nclass LineStarts {\n    constructor(lineStarts, cr, lf, crlf, isBasicASCII) {\n        this.lineStarts = lineStarts;\n        this.cr = cr;\n        this.lf = lf;\n        this.crlf = crlf;\n        this.isBasicASCII = isBasicASCII;\n    }\n}\nexport function createLineStartsFast(str, readonly = true) {\n    const r = [0];\n    let rLength = 1;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            r[rLength++] = i + 1;\n        }\n    }\n    if (readonly) {\n        return createUintArray(r);\n    }\n    else {\n        return r;\n    }\n}\nexport function createLineStarts(r, str) {\n    r.length = 0;\n    r[0] = 0;\n    let rLength = 1;\n    let cr = 0, lf = 0, crlf = 0;\n    let isBasicASCII = true;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                crlf++;\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                cr++;\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            lf++;\n            r[rLength++] = i + 1;\n        }\n        else {\n            if (isBasicASCII) {\n                if (chr !== 9 /* CharCode.Tab */ && (chr < 32 || chr > 126)) {\n                    isBasicASCII = false;\n                }\n            }\n        }\n    }\n    const result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\n    r.length = 0;\n    return result;\n}\nexport class Piece {\n    constructor(bufferIndex, start, end, lineFeedCnt, length) {\n        this.bufferIndex = bufferIndex;\n        this.start = start;\n        this.end = end;\n        this.lineFeedCnt = lineFeedCnt;\n        this.length = length;\n    }\n}\nexport class StringBuffer {\n    constructor(buffer, lineStarts) {\n        this.buffer = buffer;\n        this.lineStarts = lineStarts;\n    }\n}\n/**\n * Readonly snapshot for piece tree.\n * In a real multiple thread environment, to make snapshot reading always work correctly, we need to\n * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.\n * 2. TreeNode/Buffers normalization should not happen during snapshot reading.\n */\nclass PieceTreeSnapshot {\n    constructor(tree, BOM) {\n        this._pieces = [];\n        this._tree = tree;\n        this._BOM = BOM;\n        this._index = 0;\n        if (tree.root !== SENTINEL) {\n            tree.iterate(tree.root, node => {\n                if (node !== SENTINEL) {\n                    this._pieces.push(node.piece);\n                }\n                return true;\n            });\n        }\n    }\n    read() {\n        if (this._pieces.length === 0) {\n            if (this._index === 0) {\n                this._index++;\n                return this._BOM;\n            }\n            else {\n                return null;\n            }\n        }\n        if (this._index > this._pieces.length - 1) {\n            return null;\n        }\n        if (this._index === 0) {\n            return this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);\n        }\n        return this._tree.getPieceContent(this._pieces[this._index++]);\n    }\n}\nclass PieceTreeSearchCache {\n    constructor(limit) {\n        this._limit = limit;\n        this._cache = [];\n    }\n    get(offset) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    get2(lineNumber) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    set(nodePosition) {\n        if (this._cache.length >= this._limit) {\n            this._cache.shift();\n        }\n        this._cache.push(nodePosition);\n    }\n    validate(offset) {\n        let hasInvalidVal = false;\n        const tmp = this._cache;\n        for (let i = 0; i < tmp.length; i++) {\n            const nodePos = tmp[i];\n            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\n                tmp[i] = null;\n                hasInvalidVal = true;\n                continue;\n            }\n        }\n        if (hasInvalidVal) {\n            const newArr = [];\n            for (const entry of tmp) {\n                if (entry !== null) {\n                    newArr.push(entry);\n                }\n            }\n            this._cache = newArr;\n        }\n    }\n}\nexport class PieceTreeBase {\n    constructor(chunks, eol, eolNormalized) {\n        this.create(chunks, eol, eolNormalized);\n    }\n    create(chunks, eol, eolNormalized) {\n        this._buffers = [\n            new StringBuffer('', [0])\n        ];\n        this._lastChangeBufferPos = { line: 0, column: 0 };\n        this.root = SENTINEL;\n        this._lineCnt = 1;\n        this._length = 0;\n        this._EOL = eol;\n        this._EOLLength = eol.length;\n        this._EOLNormalized = eolNormalized;\n        let lastNode = null;\n        for (let i = 0, len = chunks.length; i < len; i++) {\n            if (chunks[i].buffer.length > 0) {\n                if (!chunks[i].lineStarts) {\n                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\n                }\n                const piece = new Piece(i + 1, { line: 0, column: 0 }, { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] }, chunks[i].lineStarts.length - 1, chunks[i].buffer.length);\n                this._buffers.push(chunks[i]);\n                lastNode = this.rbInsertRight(lastNode, piece);\n            }\n        }\n        this._searchCache = new PieceTreeSearchCache(1);\n        this._lastVisitedLine = { lineNumber: 0, value: '' };\n        this.computeBufferMetadata();\n    }\n    normalizeEOL(eol) {\n        const averageBufferSize = AverageBufferSize;\n        const min = averageBufferSize - Math.floor(averageBufferSize / 3);\n        const max = min * 2;\n        let tempChunk = '';\n        let tempChunkLen = 0;\n        const chunks = [];\n        this.iterate(this.root, node => {\n            const str = this.getNodeContent(node);\n            const len = str.length;\n            if (tempChunkLen <= min || tempChunkLen + len < max) {\n                tempChunk += str;\n                tempChunkLen += len;\n                return true;\n            }\n            // flush anyways\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n            tempChunk = str;\n            tempChunkLen = len;\n            return true;\n        });\n        if (tempChunkLen > 0) {\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n        }\n        this.create(chunks, eol, true);\n    }\n    // #region Buffer API\n    getEOL() {\n        return this._EOL;\n    }\n    setEOL(newEOL) {\n        this._EOL = newEOL;\n        this._EOLLength = this._EOL.length;\n        this.normalizeEOL(newEOL);\n    }\n    createSnapshot(BOM) {\n        return new PieceTreeSnapshot(this, BOM);\n    }\n    getOffsetAt(lineNumber, column) {\n        let leftLen = 0; // inorder\n        let x = this.root;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\n                leftLen += x.size_left;\n                // lineNumber >= 2\n                const accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                return leftLen += accumualtedValInCurrentIndex + column - 1;\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                leftLen += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return leftLen;\n    }\n    getPositionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        let x = this.root;\n        let lfCnt = 0;\n        const originalOffset = offset;\n        while (x !== SENTINEL) {\n            if (x.size_left !== 0 && x.size_left >= offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                const out = this.getIndexOf(x, offset - x.size_left);\n                lfCnt += x.lf_left + out.index;\n                if (out.index === 0) {\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                return new Position(lfCnt + 1, out.remainder + 1);\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                lfCnt += x.lf_left + x.piece.lineFeedCnt;\n                if (x.right === SENTINEL) {\n                    // last node\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - offset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                else {\n                    x = x.right;\n                }\n            }\n        }\n        return new Position(1, 1);\n    }\n    getValueInRange(range, eol) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            return '';\n        }\n        const startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\n        const endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\n        const value = this.getValueInRange2(startPosition, endPosition);\n        if (eol) {\n            if (eol !== this._EOL || !this._EOLNormalized) {\n                return value.replace(/\\r\\n|\\r|\\n/g, eol);\n            }\n            if (eol === this.getEOL() && this._EOLNormalized) {\n                if (eol === '\\r\\n') {\n                }\n                return value;\n            }\n            return value.replace(/\\r\\n|\\r|\\n/g, eol);\n        }\n        return value;\n    }\n    getValueInRange2(startPosition, endPosition) {\n        if (startPosition.node === endPosition.node) {\n            const node = startPosition.node;\n            const buffer = this._buffers[node.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n            return buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);\n        }\n        let x = startPosition.node;\n        const buffer = this._buffers[x.piece.bufferIndex].buffer;\n        const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n        let ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (x === endPosition.node) {\n                ret += buffer.substring(startOffset, startOffset + endPosition.remainder);\n                break;\n            }\n            else {\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    getLinesContent() {\n        const lines = [];\n        let linesLength = 0;\n        let currentLine = '';\n        let danglingCR = false;\n        this.iterate(this.root, node => {\n            if (node === SENTINEL) {\n                return true;\n            }\n            const piece = node.piece;\n            let pieceLength = piece.length;\n            if (pieceLength === 0) {\n                return true;\n            }\n            const buffer = this._buffers[piece.bufferIndex].buffer;\n            const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n            const pieceStartLine = piece.start.line;\n            const pieceEndLine = piece.end.line;\n            let pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\n            if (danglingCR) {\n                if (buffer.charCodeAt(pieceStartOffset) === 10 /* CharCode.LineFeed */) {\n                    // pretend the \\n was in the previous piece..\n                    pieceStartOffset++;\n                    pieceLength--;\n                }\n                lines[linesLength++] = currentLine;\n                currentLine = '';\n                danglingCR = false;\n                if (pieceLength === 0) {\n                    return true;\n                }\n            }\n            if (pieceStartLine === pieceEndLine) {\n                // this piece has no new lines\n                if (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === 13 /* CharCode.CarriageReturn */) {\n                    danglingCR = true;\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\n                }\n                else {\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength);\n                }\n                return true;\n            }\n            // add the text before the first line start in this piece\n            currentLine += (this._EOLNormalized\n                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))\n                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n            lines[linesLength++] = currentLine;\n            for (let line = pieceStartLine + 1; line < pieceEndLine; line++) {\n                currentLine = (this._EOLNormalized\n                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)\n                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n                lines[linesLength++] = currentLine;\n            }\n            if (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === 13 /* CharCode.CarriageReturn */) {\n                danglingCR = true;\n                if (piece.end.column === 0) {\n                    // The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\n                    linesLength--;\n                }\n                else {\n                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\n                }\n            }\n            else {\n                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\n            }\n            return true;\n        });\n        if (danglingCR) {\n            lines[linesLength++] = currentLine;\n            currentLine = '';\n        }\n        lines[linesLength++] = currentLine;\n        return lines;\n    }\n    getLength() {\n        return this._length;\n    }\n    getLineCount() {\n        return this._lineCnt;\n    }\n    getLineContent(lineNumber) {\n        if (this._lastVisitedLine.lineNumber === lineNumber) {\n            return this._lastVisitedLine.value;\n        }\n        this._lastVisitedLine.lineNumber = lineNumber;\n        if (lineNumber === this._lineCnt) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);\n        }\n        else if (this._EOLNormalized) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\n        }\n        else {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\n        }\n        return this._lastVisitedLine.value;\n    }\n    _getCharCode(nodePos) {\n        if (nodePos.remainder === nodePos.node.piece.length) {\n            // the char we want to fetch is at the head of next node.\n            const matchingNode = nodePos.node.next();\n            if (!matchingNode) {\n                return 0;\n            }\n            const buffer = this._buffers[matchingNode.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\n            return buffer.buffer.charCodeAt(startOffset);\n        }\n        else {\n            const buffer = this._buffers[nodePos.node.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\n            const targetOffset = startOffset + nodePos.remainder;\n            return buffer.buffer.charCodeAt(targetOffset);\n        }\n    }\n    getLineCharCode(lineNumber, index) {\n        const nodePos = this.nodeAt2(lineNumber, index + 1);\n        return this._getCharCode(nodePos);\n    }\n    getLineLength(lineNumber) {\n        if (lineNumber === this.getLineCount()) {\n            const startOffset = this.getOffsetAt(lineNumber, 1);\n            return this.getLength() - startOffset;\n        }\n        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\n    }\n    findMatchesInNode(node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n        const start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\n        const end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\n        let m;\n        // Reset regex to search from the beginning\n        const ret = { line: 0, column: 0 };\n        let searchText;\n        let offsetInBuffer;\n        if (searcher._wordSeparators) {\n            searchText = buffer.buffer.substring(start, end);\n            offsetInBuffer = (offset) => offset + start;\n            searcher.reset(0);\n        }\n        else {\n            searchText = buffer.buffer;\n            offsetInBuffer = (offset) => offset;\n            searcher.reset(start);\n        }\n        do {\n            m = searcher.next(searchText);\n            if (m) {\n                if (offsetInBuffer(m.index) >= end) {\n                    return resultLen;\n                }\n                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\n                const lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\n                const retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\n                const retEndColumn = retStartColumn + m[0].length;\n                result[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\n                if (offsetInBuffer(m.index) + m[0].length >= end) {\n                    return resultLen;\n                }\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\n        if (startPosition === null) {\n            return [];\n        }\n        const endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\n        if (endPosition === null) {\n            return [];\n        }\n        let start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        const end = this.positionInBuffer(endPosition.node, endPosition.remainder);\n        if (startPosition.node === endPosition.node) {\n            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n            return result;\n        }\n        let startLineNumber = searchRange.startLineNumber;\n        let currentNode = startPosition.node;\n        while (currentNode !== endPosition.node) {\n            const lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\n            if (lineBreakCnt >= 1) {\n                // last line break position\n                const lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\n                const startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\n                const nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\n                const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\n                if (resultLen >= limitResultCount) {\n                    return result;\n                }\n                startLineNumber += lineBreakCnt;\n            }\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            // search for the remaining content\n            if (startLineNumber === searchRange.endLineNumber) {\n                const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n                return result;\n            }\n            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            if (resultLen >= limitResultCount) {\n                return result;\n            }\n            startLineNumber++;\n            startPosition = this.nodeAt2(startLineNumber, 1);\n            currentNode = startPosition.node;\n            start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        }\n        if (startLineNumber === searchRange.endLineNumber) {\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n        return result;\n    }\n    _findMatchesInLine(searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    // #endregion\n    // #region Piece Table\n    insert(offset, value, eolNormalized = false) {\n        this._EOLNormalized = this._EOLNormalized && eolNormalized;\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (this.root !== SENTINEL) {\n            const { node, remainder, nodeStartOffset } = this.nodeAt(offset);\n            const piece = node.piece;\n            const bufferIndex = piece.bufferIndex;\n            const insertPosInBuffer = this.positionInBuffer(node, remainder);\n            if (node.piece.bufferIndex === 0 &&\n                piece.end.line === this._lastChangeBufferPos.line &&\n                piece.end.column === this._lastChangeBufferPos.column &&\n                (nodeStartOffset + piece.length === offset) &&\n                value.length < AverageBufferSize) {\n                // changed buffer\n                this.appendToNode(node, value);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (nodeStartOffset === offset) {\n                this.insertContentToNodeLeft(value, node);\n                this._searchCache.validate(offset);\n            }\n            else if (nodeStartOffset + node.piece.length > offset) {\n                // we are inserting into the middle of a node.\n                const nodesToDel = [];\n                let newRightPiece = new Piece(piece.bufferIndex, insertPosInBuffer, piece.end, this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end), this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer));\n                if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n                    const headOfRight = this.nodeCharCodeAt(node, remainder);\n                    if (headOfRight === 10 /** \\n */) {\n                        const newStart = { line: newRightPiece.start.line + 1, column: 0 };\n                        newRightPiece = new Piece(newRightPiece.bufferIndex, newStart, newRightPiece.end, this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end), newRightPiece.length - 1);\n                        value += '\\n';\n                    }\n                }\n                // reuse node for content before insertion point.\n                if (this.shouldCheckCRLF() && this.startWithLF(value)) {\n                    const tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\n                    if (tailOfLeft === 13 /** \\r */) {\n                        const previousPos = this.positionInBuffer(node, remainder - 1);\n                        this.deleteNodeTail(node, previousPos);\n                        value = '\\r' + value;\n                        if (node.piece.length === 0) {\n                            nodesToDel.push(node);\n                        }\n                    }\n                    else {\n                        this.deleteNodeTail(node, insertPosInBuffer);\n                    }\n                }\n                else {\n                    this.deleteNodeTail(node, insertPosInBuffer);\n                }\n                const newPieces = this.createNewPieces(value);\n                if (newRightPiece.length > 0) {\n                    this.rbInsertRight(node, newRightPiece);\n                }\n                let tmpNode = node;\n                for (let k = 0; k < newPieces.length; k++) {\n                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n                }\n                this.deleteNodes(nodesToDel);\n            }\n            else {\n                this.insertContentToNodeRight(value, node);\n            }\n        }\n        else {\n            // insert new node\n            const pieces = this.createNewPieces(value);\n            let node = this.rbInsertLeft(null, pieces[0]);\n            for (let k = 1; k < pieces.length; k++) {\n                node = this.rbInsertRight(node, pieces[k]);\n            }\n        }\n        // todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\n        this.computeBufferMetadata();\n    }\n    delete(offset, cnt) {\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (cnt <= 0 || this.root === SENTINEL) {\n            return;\n        }\n        const startPosition = this.nodeAt(offset);\n        const endPosition = this.nodeAt(offset + cnt);\n        const startNode = startPosition.node;\n        const endNode = endPosition.node;\n        if (startNode === endNode) {\n            const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n            const endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);\n            if (startPosition.nodeStartOffset === offset) {\n                if (cnt === startNode.piece.length) { // delete node\n                    const next = startNode.next();\n                    rbDelete(this, startNode);\n                    this.validateCRLFWithPrevNode(next);\n                    this.computeBufferMetadata();\n                    return;\n                }\n                this.deleteNodeHead(startNode, endSplitPosInBuffer);\n                this._searchCache.validate(offset);\n                this.validateCRLFWithPrevNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\n                this.deleteNodeTail(startNode, startSplitPosInBuffer);\n                this.validateCRLFWithNextNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            // delete content in the middle, this node will be splitted to nodes\n            this.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);\n            this.computeBufferMetadata();\n            return;\n        }\n        const nodesToDel = [];\n        const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n        this.deleteNodeTail(startNode, startSplitPosInBuffer);\n        this._searchCache.validate(offset);\n        if (startNode.piece.length === 0) {\n            nodesToDel.push(startNode);\n        }\n        // update last touched node\n        const endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\n        this.deleteNodeHead(endNode, endSplitPosInBuffer);\n        if (endNode.piece.length === 0) {\n            nodesToDel.push(endNode);\n        }\n        // delete nodes in between\n        const secondNode = startNode.next();\n        for (let node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\n            nodesToDel.push(node);\n        }\n        const prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\n        this.deleteNodes(nodesToDel);\n        this.validateCRLFWithNextNode(prev);\n        this.computeBufferMetadata();\n    }\n    insertContentToNodeLeft(value, node) {\n        // we are inserting content to the beginning of node\n        const nodesToDel = [];\n        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\n            // move `\\n` to new node.\n            const piece = node.piece;\n            const newStart = { line: piece.start.line + 1, column: 0 };\n            const nPiece = new Piece(piece.bufferIndex, newStart, piece.end, this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end), piece.length - 1);\n            node.piece = nPiece;\n            value += '\\n';\n            updateTreeMetadata(this, node, -1, -1);\n            if (node.piece.length === 0) {\n                nodesToDel.push(node);\n            }\n        }\n        const newPieces = this.createNewPieces(value);\n        let newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\n        for (let k = newPieces.length - 2; k >= 0; k--) {\n            newNode = this.rbInsertLeft(newNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n        this.deleteNodes(nodesToDel);\n    }\n    insertContentToNodeRight(value, node) {\n        // we are inserting to the right of this node.\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            // move \\n to the new node.\n            value += '\\n';\n        }\n        const newPieces = this.createNewPieces(value);\n        const newNode = this.rbInsertRight(node, newPieces[0]);\n        let tmpNode = newNode;\n        for (let k = 1; k < newPieces.length; k++) {\n            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    positionInBuffer(node, remainder, ret) {\n        const piece = node.piece;\n        const bufferIndex = node.piece.bufferIndex;\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        const startOffset = lineStarts[piece.start.line] + piece.start.column;\n        const offset = startOffset + remainder;\n        // binary search offset between startOffset and endOffset\n        let low = piece.start.line;\n        let high = piece.end.line;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStart = lineStarts[mid];\n            if (mid === high) {\n                break;\n            }\n            midStop = lineStarts[mid + 1];\n            if (offset < midStart) {\n                high = mid - 1;\n            }\n            else if (offset >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        if (ret) {\n            ret.line = mid;\n            ret.column = offset - midStart;\n            return null;\n        }\n        return {\n            line: mid,\n            column: offset - midStart\n        };\n    }\n    getLineFeedCnt(bufferIndex, start, end) {\n        // we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\n        // now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\n        if (end.column === 0) {\n            return end.line - start.line;\n        }\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        if (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\n            return end.line - start.line;\n        }\n        const nextLineStartOffset = lineStarts[end.line + 1];\n        const endOffset = lineStarts[end.line] + end.column;\n        if (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\n            return end.line - start.line;\n        }\n        // endOffset + 1 === nextLineStartOffset\n        // character at endOffset is \\n, so we check the character before first\n        // if character at endOffset is \\r, end.column is 0 and we can't get here.\n        const previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\n        const buffer = this._buffers[bufferIndex].buffer;\n        if (buffer.charCodeAt(previousCharOffset) === 13) {\n            return end.line - start.line + 1;\n        }\n        else {\n            return end.line - start.line;\n        }\n    }\n    offsetInBuffer(bufferIndex, cursor) {\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        return lineStarts[cursor.line] + cursor.column;\n    }\n    deleteNodes(nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            rbDelete(this, nodes[i]);\n        }\n    }\n    createNewPieces(text) {\n        if (text.length > AverageBufferSize) {\n            // the content is large, operations like substring, charCode becomes slow\n            // so here we split it into smaller chunks, just like what we did for CR/LF normalization\n            const newPieces = [];\n            while (text.length > AverageBufferSize) {\n                const lastChar = text.charCodeAt(AverageBufferSize - 1);\n                let splitText;\n                if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n                    // last character is \\r or a high surrogate => keep it back\n                    splitText = text.substring(0, AverageBufferSize - 1);\n                    text = text.substring(AverageBufferSize - 1);\n                }\n                else {\n                    splitText = text.substring(0, AverageBufferSize);\n                    text = text.substring(AverageBufferSize);\n                }\n                const lineStarts = createLineStartsFast(splitText);\n                newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, splitText.length));\n                this._buffers.push(new StringBuffer(splitText, lineStarts));\n            }\n            const lineStarts = createLineStartsFast(text);\n            newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, text.length));\n            this._buffers.push(new StringBuffer(text, lineStarts));\n            return newPieces;\n        }\n        let startOffset = this._buffers[0].buffer.length;\n        const lineStarts = createLineStartsFast(text, false);\n        let start = this._lastChangeBufferPos;\n        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\n            && startOffset !== 0\n            && this.startWithLF(text)\n            && this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\n        ) {\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\n            start = this._lastChangeBufferPos;\n            for (let i = 0; i < lineStarts.length; i++) {\n                lineStarts[i] += startOffset + 1;\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += '_' + text;\n            startOffset += 1;\n        }\n        else {\n            if (startOffset !== 0) {\n                for (let i = 0; i < lineStarts.length; i++) {\n                    lineStarts[i] += startOffset;\n                }\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += text;\n        }\n        const endOffset = this._buffers[0].buffer.length;\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\n        const endPos = { line: endIndex, column: endColumn };\n        const newPiece = new Piece(0, /** todo@peng */ start, endPos, this.getLineFeedCnt(0, start, endPos), endOffset - startOffset);\n        this._lastChangeBufferPos = endPos;\n        return [newPiece];\n    }\n    getLineRawContent(lineNumber, endOffset = 0) {\n        let x = this.root;\n        let ret = '';\n        const cache = this._searchCache.get2(lineNumber);\n        if (cache) {\n            x = cache.node;\n            const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\n                ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n            }\n            else {\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\n                return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n            }\n        }\n        else {\n            let nodeStartOffset = 0;\n            const originalLineNumber = lineNumber;\n            while (x !== SENTINEL) {\n                if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                    x = x.left;\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    nodeStartOffset += x.size_left;\n                    this._searchCache.set({\n                        node: x,\n                        nodeStartOffset,\n                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\n                    });\n                    return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n                    break;\n                }\n                else {\n                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                    nodeStartOffset += x.size_left + x.piece.length;\n                    x = x.right;\n                }\n            }\n        }\n        // search in order, to find the node contains end column\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);\n                return ret;\n            }\n            else {\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    computeBufferMetadata() {\n        let x = this.root;\n        let lfCnt = 1;\n        let len = 0;\n        while (x !== SENTINEL) {\n            lfCnt += x.lf_left + x.piece.lineFeedCnt;\n            len += x.size_left + x.piece.length;\n            x = x.right;\n        }\n        this._lineCnt = lfCnt;\n        this._length = len;\n        this._searchCache.validate(this._length);\n    }\n    // #region node operations\n    getIndexOf(node, accumulatedValue) {\n        const piece = node.piece;\n        const pos = this.positionInBuffer(node, accumulatedValue);\n        const lineCnt = pos.line - piece.start.line;\n        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\n            // we are checking the end of this node, so a CRLF check is necessary.\n            const realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\n            if (realLineCnt !== lineCnt) {\n                // aha yes, CRLF\n                return { index: realLineCnt, remainder: 0 };\n            }\n        }\n        return { index: lineCnt, remainder: pos.column };\n    }\n    getAccumulatedValue(node, index) {\n        if (index < 0) {\n            return 0;\n        }\n        const piece = node.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const expectedLineStartIndex = piece.start.line + index + 1;\n        if (expectedLineStartIndex > piece.end.line) {\n            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\n        }\n        else {\n            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\n        }\n    }\n    deleteNodeTail(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const newEnd = pos;\n        const newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = newEndOffset - originalEndOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    deleteNodeHead(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const newStart = pos;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n        const newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = originalStartOffset - newStartOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    shrinkNode(node, start, end) {\n        const piece = node.piece;\n        const originalStartPos = piece.start;\n        const originalEndPos = piece.end;\n        // old piece, originalStartPos, start\n        const oldLength = piece.length;\n        const oldLFCnt = piece.lineFeedCnt;\n        const newEnd = start;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\n        // new right piece, end, originalEndPos\n        const newPiece = new Piece(piece.bufferIndex, end, originalEndPos, this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos), this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end));\n        const newNode = this.rbInsertRight(node, newPiece);\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    appendToNode(node, value) {\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            value += '\\n';\n        }\n        const hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\n        const startOffset = this._buffers[0].buffer.length;\n        this._buffers[0].buffer += value;\n        const lineStarts = createLineStartsFast(value, false);\n        for (let i = 0; i < lineStarts.length; i++) {\n            lineStarts[i] += startOffset;\n        }\n        if (hitCRLF) {\n            const prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\n            this._buffers[0].lineStarts.pop();\n            // _lastChangeBufferPos is already wrong\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\n        }\n        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\n        const newEnd = { line: endIndex, column: endColumn };\n        const newLength = node.piece.length + value.length;\n        const oldLineFeedCnt = node.piece.lineFeedCnt;\n        const newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - oldLineFeedCnt;\n        node.piece = new Piece(node.piece.bufferIndex, node.piece.start, newEnd, newLineFeedCnt, newLength);\n        this._lastChangeBufferPos = newEnd;\n        updateTreeMetadata(this, node, value.length, lf_delta);\n    }\n    nodeAt(offset) {\n        let x = this.root;\n        const cache = this._searchCache.get(offset);\n        if (cache) {\n            return {\n                node: cache.node,\n                nodeStartOffset: cache.nodeStartOffset,\n                remainder: offset - cache.nodeStartOffset\n            };\n        }\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.size_left > offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                nodeStartOffset += x.size_left;\n                const ret = {\n                    node: x,\n                    remainder: offset - x.size_left,\n                    nodeStartOffset\n                };\n                this._searchCache.set(ret);\n                return ret;\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return null;\n    }\n    nodeAt2(lineNumber, column) {\n        let x = this.root;\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                nodeStartOffset += x.size_left;\n                return {\n                    node: x,\n                    remainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                if (prevAccumualtedValue + column - 1 <= x.piece.length) {\n                    return {\n                        node: x,\n                        remainder: prevAccumualtedValue + column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length - prevAccumualtedValue;\n                    break;\n                }\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        // search in order, to find the node contains position.column\n        x = x.next();\n        while (x !== SENTINEL) {\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const nodeStartOffset = this.offsetOfNode(x);\n                return {\n                    node: x,\n                    remainder: Math.min(column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else {\n                if (x.piece.length >= column - 1) {\n                    const nodeStartOffset = this.offsetOfNode(x);\n                    return {\n                        node: x,\n                        remainder: column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length;\n                }\n            }\n            x = x.next();\n        }\n        return null;\n    }\n    nodeCharCodeAt(node, offset) {\n        if (node.piece.lineFeedCnt < 1) {\n            return -1;\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\n        return buffer.buffer.charCodeAt(newOffset);\n    }\n    offsetOfNode(node) {\n        if (!node) {\n            return 0;\n        }\n        let pos = node.size_left;\n        while (node !== this.root) {\n            if (node.parent.right === node) {\n                pos += node.parent.size_left + node.parent.piece.length;\n            }\n            node = node.parent;\n        }\n        return pos;\n    }\n    // #endregion\n    // #region CRLF\n    shouldCheckCRLF() {\n        return !(this._EOLNormalized && this._EOL === '\\n');\n    }\n    startWithLF(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(0) === 10;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        const piece = val.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const line = piece.start.line;\n        const startOffset = lineStarts[line] + piece.start.column;\n        if (line === lineStarts.length - 1) {\n            // last line, so there is no line feed at the end of this line\n            return false;\n        }\n        const nextLineOffset = lineStarts[line + 1];\n        if (nextLineOffset > startOffset + 1) {\n            return false;\n        }\n        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\n    }\n    endWithCR(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(val.length - 1) === 13;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\n    }\n    validateCRLFWithPrevNode(nextNode) {\n        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\n            const node = nextNode.prev();\n            if (this.endWithCR(node)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    validateCRLFWithNextNode(node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(node)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    fixCRLF(prev, next) {\n        const nodesToDel = [];\n        // update node\n        const lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\n        let newEnd;\n        if (prev.piece.end.column === 0) {\n            // it means, last line ends with \\r, not \\r\\n\n            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\n        }\n        else {\n            // \\r\\n\n            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\n        }\n        const prevNewLength = prev.piece.length - 1;\n        const prevNewLFCnt = prev.piece.lineFeedCnt - 1;\n        prev.piece = new Piece(prev.piece.bufferIndex, prev.piece.start, newEnd, prevNewLFCnt, prevNewLength);\n        updateTreeMetadata(this, prev, -1, -1);\n        if (prev.piece.length === 0) {\n            nodesToDel.push(prev);\n        }\n        // update nextNode\n        const newStart = { line: next.piece.start.line + 1, column: 0 };\n        const newLength = next.piece.length - 1;\n        const newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\n        next.piece = new Piece(next.piece.bufferIndex, newStart, next.piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, next, -1, -1);\n        if (next.piece.length === 0) {\n            nodesToDel.push(next);\n        }\n        // create new piece which contains \\r\\n\n        const pieces = this.createNewPieces('\\r\\n');\n        this.rbInsertRight(prev, pieces[0]);\n        // delete empty nodes\n        for (let i = 0; i < nodesToDel.length; i++) {\n            rbDelete(this, nodesToDel[i]);\n        }\n    }\n    adjustCarriageReturnFromNext(value, node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                // move `\\n` forward\n                value += '\\n';\n                if (nextNode.piece.length === 1) {\n                    rbDelete(this, nextNode);\n                }\n                else {\n                    const piece = nextNode.piece;\n                    const newStart = { line: piece.start.line + 1, column: 0 };\n                    const newLength = piece.length - 1;\n                    const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n                    nextNode.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n                    updateTreeMetadata(this, nextNode, -1, -1);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // #endregion\n    // #endregion\n    // #region Tree operations\n    iterate(node, callback) {\n        if (node === SENTINEL) {\n            return callback(SENTINEL);\n        }\n        const leftRet = this.iterate(node.left, callback);\n        if (!leftRet) {\n            return leftRet;\n        }\n        return callback(node) && this.iterate(node.right, callback);\n    }\n    getNodeContent(node) {\n        if (node === SENTINEL) {\n            return '';\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const piece = node.piece;\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    getPieceContent(piece) {\n        const buffer = this._buffers[piece.bufferIndex];\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b    <----   a    b\n     *                         /\n     *                        z\n     */\n    rbInsertRight(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        const x = this.root;\n        if (x === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.right === SENTINEL) {\n            node.right = z;\n            z.parent = node;\n        }\n        else {\n            const nextNode = leftest(node.right);\n            nextNode.left = z;\n            z.parent = nextNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b     ---->   a    b\n     *                       \\\n     *                        z\n     */\n    rbInsertLeft(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        if (this.root === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.left === SENTINEL) {\n            node.left = z;\n            z.parent = node;\n        }\n        else {\n            const prevNode = righttest(node.left); // a\n            prevNode.right = z;\n            z.parent = prevNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../core/range.js';\nimport { ApplyEditsResult } from '../../model.js';\nimport { PieceTreeBase } from './pieceTreeBase.js';\nimport { countEOL } from '../../core/eolCounter.js';\nimport { TextChange } from '../../core/textChange.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class PieceTreeTextBuffer extends Disposable {\n    constructor(chunks, BOM, eol, containsRTL, containsUnusualLineTerminators, isBasicASCII, eolNormalized) {\n        super();\n        this._onDidChangeContent = this._register(new Emitter());\n        this._BOM = BOM;\n        this._mightContainNonBasicASCII = !isBasicASCII;\n        this._mightContainRTL = containsRTL;\n        this._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n        this._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n    }\n    mightContainRTL() {\n        return this._mightContainRTL;\n    }\n    mightContainUnusualLineTerminators() {\n        return this._mightContainUnusualLineTerminators;\n    }\n    resetMightContainUnusualLineTerminators() {\n        this._mightContainUnusualLineTerminators = false;\n    }\n    mightContainNonBasicASCII() {\n        return this._mightContainNonBasicASCII;\n    }\n    getBOM() {\n        return this._BOM;\n    }\n    getEOL() {\n        return this._pieceTree.getEOL();\n    }\n    createSnapshot(preserveBOM) {\n        return this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n    }\n    getOffsetAt(lineNumber, column) {\n        return this._pieceTree.getOffsetAt(lineNumber, column);\n    }\n    getPositionAt(offset) {\n        return this._pieceTree.getPositionAt(offset);\n    }\n    getRangeAt(start, length) {\n        const end = start + length;\n        const startPosition = this.getPositionAt(start);\n        const endPosition = this.getPositionAt(end);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    getValueInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return '';\n        }\n        const lineEnding = this._getEndOfLine(eol);\n        return this._pieceTree.getValueInRange(range, lineEnding);\n    }\n    getValueLengthInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return 0;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            return (range.endColumn - range.startColumn);\n        }\n        const startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n        // offsets use the text EOL, so we need to compensate for length differences\n        // if the requested EOL doesn't match the text EOL\n        let eolOffsetCompensation = 0;\n        const desiredEOL = this._getEndOfLine(eol);\n        const actualEOL = this.getEOL();\n        if (desiredEOL.length !== actualEOL.length) {\n            const delta = desiredEOL.length - actualEOL.length;\n            const eolCount = range.endLineNumber - range.startLineNumber;\n            eolOffsetCompensation = delta * eolCount;\n        }\n        return endOffset - startOffset + eolOffsetCompensation;\n    }\n    getCharacterCountInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (this._mightContainNonBasicASCII) {\n            // we must count by iterating\n            let result = 0;\n            const fromLineNumber = range.startLineNumber;\n            const toLineNumber = range.endLineNumber;\n            for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n                const lineContent = this.getLineContent(lineNumber);\n                const fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n                const toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n                for (let offset = fromOffset; offset < toOffset; offset++) {\n                    if (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n                        result = result + 1;\n                        offset = offset + 1;\n                    }\n                    else {\n                        result = result + 1;\n                    }\n                }\n            }\n            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n            return result;\n        }\n        return this.getValueLengthInRange(range, eol);\n    }\n    getLength() {\n        return this._pieceTree.getLength();\n    }\n    getLineCount() {\n        return this._pieceTree.getLineCount();\n    }\n    getLinesContent() {\n        return this._pieceTree.getLinesContent();\n    }\n    getLineContent(lineNumber) {\n        return this._pieceTree.getLineContent(lineNumber);\n    }\n    getLineCharCode(lineNumber, index) {\n        return this._pieceTree.getLineCharCode(lineNumber, index);\n    }\n    getLineLength(lineNumber) {\n        return this._pieceTree.getLineLength(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    _getEndOfLine(eol) {\n        switch (eol) {\n            case 1 /* EndOfLinePreference.LF */:\n                return '\\n';\n            case 2 /* EndOfLinePreference.CRLF */:\n                return '\\r\\n';\n            case 0 /* EndOfLinePreference.TextDefined */:\n                return this.getEOL();\n            default:\n                throw new Error('Unknown EOL preference');\n        }\n    }\n    setEOL(newEOL) {\n        this._pieceTree.setEOL(newEOL);\n    }\n    applyEdits(rawOperations, recordTrimAutoWhitespace, computeUndoEdits) {\n        let mightContainRTL = this._mightContainRTL;\n        let mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n        let mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n        let canReduceOperations = true;\n        let operations = [];\n        for (let i = 0; i < rawOperations.length; i++) {\n            const op = rawOperations[i];\n            if (canReduceOperations && op._isTracked) {\n                canReduceOperations = false;\n            }\n            const validatedRange = op.range;\n            if (op.text) {\n                let textMightContainNonBasicASCII = true;\n                if (!mightContainNonBasicASCII) {\n                    textMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n                    mightContainNonBasicASCII = textMightContainNonBasicASCII;\n                }\n                if (!mightContainRTL && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains RTL\n                    mightContainRTL = strings.containsRTL(op.text);\n                }\n                if (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains unusual line terminators\n                    mightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n                }\n            }\n            let validText = '';\n            let eolCount = 0;\n            let firstLineLength = 0;\n            let lastLineLength = 0;\n            if (op.text) {\n                let strEOL;\n                [eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n                const bufferEOL = this.getEOL();\n                const expectedStrEOL = (bufferEOL === '\\r\\n' ? 2 /* StringEOL.CRLF */ : 1 /* StringEOL.LF */);\n                if (strEOL === 0 /* StringEOL.Unknown */ || strEOL === expectedStrEOL) {\n                    validText = op.text;\n                }\n                else {\n                    validText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n                }\n            }\n            operations[i] = {\n                sortIndex: i,\n                identifier: op.identifier || null,\n                range: validatedRange,\n                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n                rangeLength: this.getValueLengthInRange(validatedRange),\n                text: validText,\n                eolCount: eolCount,\n                firstLineLength: firstLineLength,\n                lastLineLength: lastLineLength,\n                forceMoveMarkers: Boolean(op.forceMoveMarkers),\n                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n            };\n        }\n        // Sort operations ascending\n        operations.sort(PieceTreeTextBuffer._sortOpsAscending);\n        let hasTouchingRanges = false;\n        for (let i = 0, count = operations.length - 1; i < count; i++) {\n            const rangeEnd = operations[i].range.getEndPosition();\n            const nextRangeStart = operations[i + 1].range.getStartPosition();\n            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n                if (nextRangeStart.isBefore(rangeEnd)) {\n                    // overlapping ranges\n                    throw new Error('Overlapping ranges are not allowed!');\n                }\n                hasTouchingRanges = true;\n            }\n        }\n        if (canReduceOperations) {\n            operations = this._reduceOperations(operations);\n        }\n        // Delta encode operations\n        const reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n        const newTrimAutoWhitespaceCandidates = [];\n        if (recordTrimAutoWhitespace) {\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                if (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n                    // Record already the future line numbers that might be auto whitespace removal candidates on next edit\n                    for (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n                        let currentLineContent = '';\n                        if (lineNumber === reverseRange.startLineNumber) {\n                            currentLineContent = this.getLineContent(op.range.startLineNumber);\n                            if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n                                continue;\n                            }\n                        }\n                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n                    }\n                }\n            }\n        }\n        let reverseOperations = null;\n        if (computeUndoEdits) {\n            let reverseRangeDeltaOffset = 0;\n            reverseOperations = [];\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                const bufferText = this.getValueInRange(op.range);\n                const reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n                reverseRangeDeltaOffset += (op.text.length - bufferText.length);\n                reverseOperations[i] = {\n                    sortIndex: op.sortIndex,\n                    identifier: op.identifier,\n                    range: reverseRange,\n                    text: bufferText,\n                    textChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n                };\n            }\n            // Can only sort reverse operations when the order is not significant\n            if (!hasTouchingRanges) {\n                reverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n            }\n        }\n        this._mightContainRTL = mightContainRTL;\n        this._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n        this._mightContainNonBasicASCII = mightContainNonBasicASCII;\n        const contentChanges = this._doApplyEdits(operations);\n        let trimAutoWhitespaceLineNumbers = null;\n        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n            // sort line numbers auto whitespace removal candidates for next edit descending\n            newTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n            trimAutoWhitespaceLineNumbers = [];\n            for (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n                const lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n                    // Do not have the same line number twice\n                    continue;\n                }\n                const prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n                const lineContent = this.getLineContent(lineNumber);\n                if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n                    continue;\n                }\n                trimAutoWhitespaceLineNumbers.push(lineNumber);\n            }\n        }\n        this._onDidChangeContent.fire();\n        return new ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers);\n    }\n    /**\n     * Transform operations such that they represent the same logic edit,\n     * but that they also do not cause OOM crashes.\n     */\n    _reduceOperations(operations) {\n        if (operations.length < 1000) {\n            // We know from empirical testing that a thousand edits work fine regardless of their shape.\n            return operations;\n        }\n        // At one point, due to how events are emitted and how each operation is handled,\n        // some operations can trigger a high amount of temporary string allocations,\n        // that will immediately get edited again.\n        // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n        // Therefore, the strategy is to collapse all the operations into a huge single edit operation\n        return [this._toSingleEditOperation(operations)];\n    }\n    _toSingleEditOperation(operations) {\n        let forceMoveMarkers = false;\n        const firstEditRange = operations[0].range;\n        const lastEditRange = operations[operations.length - 1].range;\n        const entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n        let lastEndLineNumber = firstEditRange.startLineNumber;\n        let lastEndColumn = firstEditRange.startColumn;\n        const result = [];\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const operation = operations[i];\n            const range = operation.range;\n            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n            // (1) -- Push old text\n            result.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n            // (2) -- Push new text\n            if (operation.text.length > 0) {\n                result.push(operation.text);\n            }\n            lastEndLineNumber = range.endLineNumber;\n            lastEndColumn = range.endColumn;\n        }\n        const text = result.join('');\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        return {\n            sortIndex: 0,\n            identifier: operations[0].identifier,\n            range: entireEditRange,\n            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n            rangeLength: this.getValueLengthInRange(entireEditRange, 0 /* EndOfLinePreference.TextDefined */),\n            text: text,\n            eolCount: eolCount,\n            firstLineLength: firstLineLength,\n            lastLineLength: lastLineLength,\n            forceMoveMarkers: forceMoveMarkers,\n            isAutoWhitespaceEdit: false\n        };\n    }\n    _doApplyEdits(operations) {\n        operations.sort(PieceTreeTextBuffer._sortOpsDescending);\n        const contentChanges = [];\n        // operations are from bottom to top\n        for (let i = 0; i < operations.length; i++) {\n            const op = operations[i];\n            const startLineNumber = op.range.startLineNumber;\n            const startColumn = op.range.startColumn;\n            const endLineNumber = op.range.endLineNumber;\n            const endColumn = op.range.endColumn;\n            if (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n                // no-op\n                continue;\n            }\n            if (op.text) {\n                // replacement\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n                this._pieceTree.insert(op.rangeOffset, op.text, true);\n            }\n            else {\n                // deletion\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n            }\n            const contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            contentChanges.push({\n                range: contentChangeRange,\n                rangeLength: op.rangeLength,\n                text: op.text,\n                rangeOffset: op.rangeOffset,\n                forceMoveMarkers: op.forceMoveMarkers\n            });\n        }\n        return contentChanges;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Assumes `operations` are validated and sorted ascending\n     */\n    static _getInverseEditRanges(operations) {\n        const result = [];\n        let prevOpEndLineNumber = 0;\n        let prevOpEndColumn = 0;\n        let prevOp = null;\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const op = operations[i];\n            let startLineNumber;\n            let startColumn;\n            if (prevOp) {\n                if (prevOp.range.endLineNumber === op.range.startLineNumber) {\n                    startLineNumber = prevOpEndLineNumber;\n                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n                }\n                else {\n                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n                    startColumn = op.range.startColumn;\n                }\n            }\n            else {\n                startLineNumber = op.range.startLineNumber;\n                startColumn = op.range.startColumn;\n            }\n            let resultRange;\n            if (op.text.length > 0) {\n                // the operation inserts something\n                const lineCount = op.eolCount + 1;\n                if (lineCount === 1) {\n                    // single line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n                }\n                else {\n                    // multi line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n                }\n            }\n            else {\n                // There is nothing to insert\n                resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n            }\n            prevOpEndLineNumber = resultRange.endLineNumber;\n            prevOpEndColumn = resultRange.endColumn;\n            result.push(resultRange);\n            prevOp = op;\n        }\n        return result;\n    }\n    static _sortOpsAscending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return a.sortIndex - b.sortIndex;\n        }\n        return r;\n    }\n    static _sortOpsDescending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return b.sortIndex - a.sortIndex;\n        }\n        return -r;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\nclass PieceTreeTextBufferFactory {\n    constructor(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _containsUnusualLineTerminators, _isBasicASCII, _normalizeEOL) {\n        this._chunks = _chunks;\n        this._bom = _bom;\n        this._cr = _cr;\n        this._lf = _lf;\n        this._crlf = _crlf;\n        this._containsRTL = _containsRTL;\n        this._containsUnusualLineTerminators = _containsUnusualLineTerminators;\n        this._isBasicASCII = _isBasicASCII;\n        this._normalizeEOL = _normalizeEOL;\n    }\n    _getEOL(defaultEOL) {\n        const totalEOLCount = this._cr + this._lf + this._crlf;\n        const totalCRCount = this._cr + this._crlf;\n        if (totalEOLCount === 0) {\n            // This is an empty file or a file with precisely one line\n            return (defaultEOL === 1 /* DefaultEndOfLine.LF */ ? '\\n' : '\\r\\n');\n        }\n        if (totalCRCount > totalEOLCount / 2) {\n            // More than half of the file contains \\r\\n ending lines\n            return '\\r\\n';\n        }\n        // At least one line more ends in \\n\n        return '\\n';\n    }\n    create(defaultEOL) {\n        const eol = this._getEOL(defaultEOL);\n        const chunks = this._chunks;\n        if (this._normalizeEOL &&\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\n            // Normalize pieces\n            for (let i = 0, len = chunks.length; i < len; i++) {\n                const str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n                const newLineStart = createLineStartsFast(str);\n                chunks[i] = new StringBuffer(str, newLineStart);\n            }\n        }\n        const textBuffer = new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);\n        return { textBuffer: textBuffer, disposable: textBuffer };\n    }\n}\nexport class PieceTreeTextBufferBuilder {\n    constructor() {\n        this.chunks = [];\n        this.BOM = '';\n        this._hasPreviousChar = false;\n        this._previousChar = 0;\n        this._tmpLineStarts = [];\n        this.cr = 0;\n        this.lf = 0;\n        this.crlf = 0;\n        this.containsRTL = false;\n        this.containsUnusualLineTerminators = false;\n        this.isBasicASCII = true;\n    }\n    acceptChunk(chunk) {\n        if (chunk.length === 0) {\n            return;\n        }\n        if (this.chunks.length === 0) {\n            if (strings.startsWithUTF8BOM(chunk)) {\n                this.BOM = strings.UTF8_BOM_CHARACTER;\n                chunk = chunk.substr(1);\n            }\n        }\n        const lastChar = chunk.charCodeAt(chunk.length - 1);\n        if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n            // last character is \\r or a high surrogate => keep it back\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n            this._hasPreviousChar = true;\n            this._previousChar = lastChar;\n        }\n        else {\n            this._acceptChunk1(chunk, false);\n            this._hasPreviousChar = false;\n            this._previousChar = lastChar;\n        }\n    }\n    _acceptChunk1(chunk, allowEmptyStrings) {\n        if (!allowEmptyStrings && chunk.length === 0) {\n            // Nothing to do\n            return;\n        }\n        if (this._hasPreviousChar) {\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n        }\n        else {\n            this._acceptChunk2(chunk);\n        }\n    }\n    _acceptChunk2(chunk) {\n        const lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n        this.cr += lineStarts.cr;\n        this.lf += lineStarts.lf;\n        this.crlf += lineStarts.crlf;\n        if (!lineStarts.isBasicASCII) {\n            // this chunk contains non basic ASCII characters\n            this.isBasicASCII = false;\n            if (!this.containsRTL) {\n                this.containsRTL = strings.containsRTL(chunk);\n            }\n            if (!this.containsUnusualLineTerminators) {\n                this.containsUnusualLineTerminators = strings.containsUnusualLineTerminators(chunk);\n            }\n        }\n    }\n    finish(normalizeEOL = true) {\n        this._finish();\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.containsUnusualLineTerminators, this.isBasicASCII, normalizeEOL);\n    }\n    _finish() {\n        if (this.chunks.length === 0) {\n            this._acceptChunk1('', true);\n        }\n        if (this._hasPreviousChar) {\n            this._hasPreviousChar = false;\n            // recreate last chunk\n            const lastChunk = this.chunks[this.chunks.length - 1];\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\n            const newLineStarts = createLineStartsFast(lastChunk.buffer);\n            lastChunk.lineStarts = newLineStarts;\n            if (this._previousChar === 13 /* CharCode.CarriageReturn */) {\n                this.cr++;\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { runWhenIdle } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { setTimeout0 } from '../../../base/common/platform.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { OffsetRange } from '../core/offsetRange.js';\nimport { nullTokenizeEncoded } from '../languages/nullTokenize.js';\nimport { FixedArray } from './fixedArray.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nexport class TokenizerWithStateStore {\n    constructor(lineCount, tokenizationSupport) {\n        this.tokenizationSupport = tokenizationSupport;\n        this.initialState = this.tokenizationSupport.getInitialState();\n        this.store = new TrackingTokenizationStateStore(lineCount);\n    }\n    getStartState(lineNumber) {\n        if (lineNumber === 1) {\n            return this.initialState;\n        }\n        return this.store.getEndState(lineNumber - 1);\n    }\n}\nexport class TokenizerWithStateStoreAndTextModel extends TokenizerWithStateStore {\n    constructor(lineCount, tokenizationSupport, _textModel, _languageIdCodec) {\n        super(lineCount, tokenizationSupport);\n        this._textModel = _textModel;\n        this._languageIdCodec = _languageIdCodec;\n    }\n    updateTokensUntilLine(builder, lineNumber) {\n        const languageId = this._textModel.getLanguageId();\n        while (true) {\n            const nextLineNumber = this.store.getFirstInvalidEndStateLineNumber();\n            if (!nextLineNumber || nextLineNumber > lineNumber) {\n                break;\n            }\n            const text = this._textModel.getLineContent(nextLineNumber);\n            const lineStartState = this.getStartState(nextLineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, lineStartState);\n            builder.add(nextLineNumber, r.tokens);\n            this.store.setEndState(nextLineNumber, r.endState);\n        }\n    }\n    /** assumes state is up to date */\n    getTokenTypeIfInsertingCharacter(position, character) {\n        // TODO@hediet: use tokenizeLineWithEdit\n        const lineStartState = this.getStartState(position.lineNumber);\n        if (!lineStartState) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const languageId = this._textModel.getLanguageId();\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        // Create the text as if `character` was inserted\n        const text = (lineContent.substring(0, position.column - 1)\n            + character\n            + lineContent.substring(position.column - 1));\n        const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, lineStartState);\n        const lineTokens = new LineTokens(r.tokens, text, this._languageIdCodec);\n        if (lineTokens.getCount() === 0) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        return lineTokens.getStandardTokenType(tokenIndex);\n    }\n    /** assumes state is up to date */\n    tokenizeLineWithEdit(position, length, newText) {\n        const lineNumber = position.lineNumber;\n        const column = position.column;\n        const lineStartState = this.getStartState(lineNumber);\n        if (!lineStartState) {\n            return null;\n        }\n        const curLineContent = this._textModel.getLineContent(lineNumber);\n        const newLineContent = curLineContent.substring(0, column - 1)\n            + newText + curLineContent.substring(column - 1 + length);\n        const languageId = this._textModel.getLanguageIdAtPosition(lineNumber, 0);\n        const result = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, newLineContent, true, lineStartState);\n        const lineTokens = new LineTokens(result.tokens, newLineContent, this._languageIdCodec);\n        return lineTokens;\n    }\n    isCheapToTokenize(lineNumber) {\n        const firstInvalidLineNumber = this.store.getFirstInvalidEndStateLineNumberOrMax();\n        if (lineNumber < firstInvalidLineNumber) {\n            return true;\n        }\n        if (lineNumber === firstInvalidLineNumber\n            && this._textModel.getLineLength(lineNumber) < 2048 /* Constants.CHEAP_TOKENIZATION_LENGTH_LIMIT */) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * The result is not cached.\n     */\n    tokenizeHeuristically(builder, startLineNumber, endLineNumber) {\n        if (endLineNumber <= this.store.getFirstInvalidEndStateLineNumberOrMax()) {\n            // nothing to do\n            return { heuristicTokens: false };\n        }\n        if (startLineNumber <= this.store.getFirstInvalidEndStateLineNumberOrMax()) {\n            // tokenization has reached the viewport start...\n            this.updateTokensUntilLine(builder, endLineNumber);\n            return { heuristicTokens: false };\n        }\n        let state = this.guessStartState(startLineNumber);\n        const languageId = this._textModel.getLanguageId();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const text = this._textModel.getLineContent(lineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, state);\n            builder.add(lineNumber, r.tokens);\n            state = r.endState;\n        }\n        return { heuristicTokens: true };\n    }\n    guessStartState(lineNumber) {\n        let nonWhitespaceColumn = this._textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n        const likelyRelevantLines = [];\n        let initialState = null;\n        for (let i = lineNumber - 1; nonWhitespaceColumn > 1 && i >= 1; i--) {\n            const newNonWhitespaceIndex = this._textModel.getLineFirstNonWhitespaceColumn(i);\n            // Ignore lines full of whitespace\n            if (newNonWhitespaceIndex === 0) {\n                continue;\n            }\n            if (newNonWhitespaceIndex < nonWhitespaceColumn) {\n                likelyRelevantLines.push(this._textModel.getLineContent(i));\n                nonWhitespaceColumn = newNonWhitespaceIndex;\n                initialState = this.getStartState(i);\n                if (initialState) {\n                    break;\n                }\n            }\n        }\n        if (!initialState) {\n            initialState = this.tokenizationSupport.getInitialState();\n        }\n        likelyRelevantLines.reverse();\n        const languageId = this._textModel.getLanguageId();\n        let state = initialState;\n        for (const line of likelyRelevantLines) {\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, line, false, state);\n            state = r.endState;\n        }\n        return state;\n    }\n}\nexport class TrackingTokenizationStateStore {\n    constructor(lineCount) {\n        this.lineCount = lineCount;\n        this.tokenizationStateStore = new TokenizationStateStore();\n        this._invalidEndStatesLineNumbers = new RangePriorityQueueImpl();\n        this._invalidEndStatesLineNumbers.addRange(new OffsetRange(1, lineCount + 1));\n    }\n    getEndState(lineNumber) {\n        return this.tokenizationStateStore.getEndState(lineNumber);\n    }\n    setEndState(lineNumber, state) {\n        while (true) {\n            const min = this._invalidEndStatesLineNumbers.min;\n            if (min !== null && min <= lineNumber) {\n                this._invalidEndStatesLineNumbers.removeMin();\n            }\n            else {\n                break;\n            }\n        }\n        const r = this.tokenizationStateStore.setEndState(lineNumber, state);\n        if (r && lineNumber < this.lineCount) {\n            // because the state changed, we cannot trust the next state anymore and have to invalidate it.\n            this._invalidEndStatesLineNumbers.addRange(new OffsetRange(lineNumber + 1, lineNumber + 2));\n        }\n        return r;\n    }\n    acceptChange(range, newLineCount) {\n        this.lineCount += newLineCount - range.length;\n        this.tokenizationStateStore.acceptChange(range, newLineCount);\n        this._invalidEndStatesLineNumbers.addRangeAndResize(new OffsetRange(range.startLineNumber, range.endLineNumberExclusive), newLineCount);\n    }\n    acceptChanges(changes) {\n        for (const c of changes) {\n            const [eolCount] = countEOL(c.text);\n            this.acceptChange(new LineRange(c.range.startLineNumber, c.range.endLineNumber + 1), eolCount + 1);\n        }\n    }\n    invalidateEndStateRange(range) {\n        this._invalidEndStatesLineNumbers.addRange(new OffsetRange(range.startLineNumber, range.endLineNumberExclusive));\n    }\n    getFirstInvalidEndStateLineNumber() {\n        return this._invalidEndStatesLineNumbers.min;\n    }\n    getFirstInvalidEndStateLineNumberOrMax() {\n        return this._invalidEndStatesLineNumbers.min || Number.MAX_SAFE_INTEGER;\n    }\n    isTokenizationComplete() {\n        return this._invalidEndStatesLineNumbers.min === null;\n    }\n}\nexport class TokenizationStateStore {\n    constructor() {\n        this._lineEndStates = new FixedArray(null);\n    }\n    getEndState(lineNumber) {\n        return this._lineEndStates.get(lineNumber);\n    }\n    setEndState(lineNumber, state) {\n        const oldState = this._lineEndStates.get(lineNumber);\n        if (oldState && oldState.equals(state)) {\n            return false;\n        }\n        this._lineEndStates.set(lineNumber, state);\n        return true;\n    }\n    acceptChange(range, newLineCount) {\n        let length = range.length;\n        if (newLineCount > 0 && length > 0) {\n            // Keep the last state, even though it is unrelated.\n            // But if the new state happens to agree with this last state, then we know we can stop tokenizing.\n            length--;\n            newLineCount--;\n        }\n        this._lineEndStates.replace(range.startLineNumber, length, newLineCount);\n    }\n}\nexport class RangePriorityQueueImpl {\n    constructor() {\n        this._ranges = [];\n    }\n    get min() {\n        if (this._ranges.length === 0) {\n            return null;\n        }\n        return this._ranges[0].start;\n    }\n    removeMin() {\n        if (this._ranges.length === 0) {\n            return null;\n        }\n        const range = this._ranges[0];\n        if (range.start + 1 === range.endExclusive) {\n            this._ranges.shift();\n        }\n        else {\n            this._ranges[0] = new OffsetRange(range.start + 1, range.endExclusive);\n        }\n        return range.start;\n    }\n    addRange(range) {\n        OffsetRange.addRange(range, this._ranges);\n    }\n    addRangeAndResize(range, newLength) {\n        let idxFirstMightBeIntersecting = 0;\n        while (!(idxFirstMightBeIntersecting >= this._ranges.length || range.start <= this._ranges[idxFirstMightBeIntersecting].endExclusive)) {\n            idxFirstMightBeIntersecting++;\n        }\n        let idxFirstIsAfter = idxFirstMightBeIntersecting;\n        while (!(idxFirstIsAfter >= this._ranges.length || range.endExclusive < this._ranges[idxFirstIsAfter].start)) {\n            idxFirstIsAfter++;\n        }\n        const delta = newLength - range.length;\n        for (let i = idxFirstIsAfter; i < this._ranges.length; i++) {\n            this._ranges[i] = this._ranges[i].delta(delta);\n        }\n        if (idxFirstMightBeIntersecting === idxFirstIsAfter) {\n            const newRange = new OffsetRange(range.start, range.start + newLength);\n            if (!newRange.isEmpty) {\n                this._ranges.splice(idxFirstMightBeIntersecting, 0, newRange);\n            }\n        }\n        else {\n            const start = Math.min(range.start, this._ranges[idxFirstMightBeIntersecting].start);\n            const endEx = Math.max(range.endExclusive, this._ranges[idxFirstIsAfter - 1].endExclusive);\n            const newRange = new OffsetRange(start, endEx + delta);\n            if (!newRange.isEmpty) {\n                this._ranges.splice(idxFirstMightBeIntersecting, idxFirstIsAfter - idxFirstMightBeIntersecting, newRange);\n            }\n            else {\n                this._ranges.splice(idxFirstMightBeIntersecting, idxFirstIsAfter - idxFirstMightBeIntersecting);\n            }\n        }\n    }\n    toString() {\n        return this._ranges.map(r => r.toString()).join(' + ');\n    }\n}\nfunction safeTokenize(languageIdCodec, languageId, tokenizationSupport, text, hasEOL, state) {\n    let r = null;\n    if (tokenizationSupport) {\n        try {\n            r = tokenizationSupport.tokenizeEncoded(text, hasEOL, state.clone());\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n    }\n    if (!r) {\n        r = nullTokenizeEncoded(languageIdCodec.encodeLanguageId(languageId), state);\n    }\n    LineTokens.convertToEndOffset(r.tokens, text.length);\n    return r;\n}\nexport class DefaultBackgroundTokenizer {\n    constructor(_tokenizerWithStateStore, _backgroundTokenStore) {\n        this._tokenizerWithStateStore = _tokenizerWithStateStore;\n        this._backgroundTokenStore = _backgroundTokenStore;\n        this._isDisposed = false;\n        this._isScheduled = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n    }\n    handleChanges() {\n        this._beginBackgroundTokenization();\n    }\n    _beginBackgroundTokenization() {\n        if (this._isScheduled || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n            return;\n        }\n        this._isScheduled = true;\n        runWhenIdle((deadline) => {\n            this._isScheduled = false;\n            this._backgroundTokenizeWithDeadline(deadline);\n        });\n    }\n    /**\n     * Tokenize until the deadline occurs, but try to yield every 1-2ms.\n     */\n    _backgroundTokenizeWithDeadline(deadline) {\n        // Read the time remaining from the `deadline` immediately because it is unclear\n        // if the `deadline` object will be valid after execution leaves this function.\n        const endTime = Date.now() + deadline.timeRemaining();\n        const execute = () => {\n            if (this._isDisposed || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n                // disposed in the meantime or detached or finished\n                return;\n            }\n            this._backgroundTokenizeForAtLeast1ms();\n            if (Date.now() < endTime) {\n                // There is still time before reaching the deadline, so yield to the browser and then\n                // continue execution\n                setTimeout0(execute);\n            }\n            else {\n                // The deadline has been reached, so schedule a new idle callback if necessary\n                this._beginBackgroundTokenization();\n            }\n        };\n        execute();\n    }\n    /**\n     * Tokenize for at least 1ms.\n     */\n    _backgroundTokenizeForAtLeast1ms() {\n        const lineCount = this._tokenizerWithStateStore._textModel.getLineCount();\n        const builder = new ContiguousMultilineTokensBuilder();\n        const sw = StopWatch.create(false);\n        do {\n            if (sw.elapsed() > 1) {\n                // the comparison is intentionally > 1 and not >= 1 to ensure that\n                // a full millisecond has elapsed, given how microseconds are rounded\n                // to milliseconds\n                break;\n            }\n            const tokenizedLineNumber = this._tokenizeOneInvalidLine(builder);\n            if (tokenizedLineNumber >= lineCount) {\n                break;\n            }\n        } while (this._hasLinesToTokenize());\n        this._backgroundTokenStore.setTokens(builder.finalize());\n        this.checkFinished();\n    }\n    _hasLinesToTokenize() {\n        if (!this._tokenizerWithStateStore) {\n            return false;\n        }\n        return !this._tokenizerWithStateStore.store.isTokenizationComplete();\n    }\n    _tokenizeOneInvalidLine(builder) {\n        if (!this._tokenizerWithStateStore || !this._hasLinesToTokenize()) {\n            return this._tokenizerWithStateStore._textModel.getLineCount() + 1;\n        }\n        const lineNumber = this._tokenizerWithStateStore.store.getFirstInvalidEndStateLineNumber();\n        this._tokenizerWithStateStore.updateTokensUntilLine(builder, lineNumber);\n        return lineNumber;\n    }\n    checkFinished() {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this._tokenizerWithStateStore.store.isTokenizationComplete()) {\n            this._backgroundTokenStore.backgroundTokenizationFinished();\n        }\n    }\n    requestTokens(startLineNumber, endLineNumberExclusive) {\n        this._tokenizerWithStateStore.store.invalidateEndStateRange(new LineRange(startLineNumber, endLineNumberExclusive));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { getWordAtText } from '../core/wordHelper.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from './textModelTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\nexport class TokenizationTextModelPart extends TextModelPart {\n    constructor(_languageService, _languageConfigurationService, _textModel, _bracketPairsTextModelPart, _languageId, _attachedViews) {\n        super();\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._textModel = _textModel;\n        this._bracketPairsTextModelPart = _bracketPairsTextModelPart;\n        this._languageId = _languageId;\n        this._attachedViews = _attachedViews;\n        this._semanticTokens = new SparseTokensStore(this._languageService.languageIdCodec);\n        this._onDidChangeLanguage = this._register(new Emitter());\n        this.onDidChangeLanguage = this._onDidChangeLanguage.event;\n        this._onDidChangeLanguageConfiguration = this._register(new Emitter());\n        this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this.grammarTokens = this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n        this._register(this._languageConfigurationService.onDidChange(e => {\n            if (e.affects(this._languageId)) {\n                this._onDidChangeLanguageConfiguration.fire({});\n            }\n        }));\n        this._register(this.grammarTokens.onDidChangeTokens(e => {\n            this._emitModelTokensChangedEvent(e);\n        }));\n        this._register(this.grammarTokens.onDidChangeBackgroundTokenizationState(e => {\n            this._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n        }));\n    }\n    handleDidChangeContent(e) {\n        if (e.isFlush) {\n            this._semanticTokens.flush();\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n                this._semanticTokens.acceptEdit(c.range, eolCount, firstLineLength, lastLineLength, c.text.length > 0 ? c.text.charCodeAt(0) : 0 /* CharCode.Null */);\n            }\n        }\n        this.grammarTokens.handleDidChangeContent(e);\n    }\n    handleDidChangeAttached() {\n        this.grammarTokens.handleDidChangeAttached();\n    }\n    /**\n     * Includes grammar and semantic tokens.\n     */\n    getLineTokens(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        const syntacticTokens = this.grammarTokens.getLineTokens(lineNumber);\n        return this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n    }\n    _emitModelTokensChangedEvent(e) {\n        if (!this._textModel._isDisposing()) {\n            this._bracketPairsTextModelPart.handleDidChangeTokens(e);\n            this._onDidChangeTokens.fire(e);\n        }\n    }\n    // #region Grammar Tokens\n    validateLineNumber(lineNumber) {\n        if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n    }\n    get hasTokens() {\n        return this.grammarTokens.hasTokens;\n    }\n    resetTokenization() {\n        this.grammarTokens.resetTokenization();\n    }\n    get backgroundTokenizationState() {\n        return this.grammarTokens.backgroundTokenizationState;\n    }\n    forceTokenization(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.forceTokenization(lineNumber);\n    }\n    isCheapToTokenize(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        return this.grammarTokens.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.tokenizeIfCheap(lineNumber);\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        return this.grammarTokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        return this.grammarTokens.tokenizeLineWithEdit(position, length, newText);\n    }\n    // #endregion\n    // #region Semantic Tokens\n    setSemanticTokens(tokens, isComplete) {\n        this._semanticTokens.set(tokens, isComplete);\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: tokens !== null,\n            ranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n        });\n    }\n    hasCompleteSemanticTokens() {\n        return this._semanticTokens.isComplete();\n    }\n    hasSomeSemanticTokens() {\n        return !this._semanticTokens.isEmpty();\n    }\n    setPartialSemanticTokens(range, tokens) {\n        if (this.hasCompleteSemanticTokens()) {\n            return;\n        }\n        const changedRange = this._textModel.validateRange(this._semanticTokens.setPartial(range, tokens));\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: true,\n            ranges: [\n                {\n                    fromLineNumber: changedRange.startLineNumber,\n                    toLineNumber: changedRange.endLineNumber,\n                },\n            ],\n        });\n    }\n    // #endregion\n    // #region Utility Methods\n    getWordAtPosition(_position) {\n        this.assertNotDisposed();\n        const position = this._textModel.validatePosition(_position);\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        // (1). First try checking right biased word\n        const [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n        const rightBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n        // Make sure the result touches the original passed in position\n        if (rightBiasedWord &&\n            rightBiasedWord.startColumn <= _position.column &&\n            _position.column <= rightBiasedWord.endColumn) {\n            return rightBiasedWord;\n        }\n        // (2). Else, if we were at a language boundary, check the left biased word\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n            // edge case, where `position` sits between two tokens belonging to two different languages\n            const [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex - 1);\n            const leftBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n            // Make sure the result touches the original passed in position\n            if (leftBiasedWord &&\n                leftBiasedWord.startColumn <= _position.column &&\n                _position.column <= leftBiasedWord.endColumn) {\n                return leftBiasedWord;\n            }\n        }\n        return null;\n    }\n    getLanguageConfiguration(languageId) {\n        return this._languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    static _findLanguageBoundaries(lineTokens, tokenIndex) {\n        const languageId = lineTokens.getLanguageId(tokenIndex);\n        // go left until a different language is hit\n        let startOffset = 0;\n        for (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n            startOffset = lineTokens.getStartOffset(i);\n        }\n        // go right until a different language is hit\n        let endOffset = lineTokens.getLineContent().length;\n        for (let i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n            endOffset = lineTokens.getEndOffset(i);\n        }\n        return [startOffset, endOffset];\n    }\n    getWordUntilPosition(position) {\n        const wordAtPosition = this.getWordAtPosition(position);\n        if (!wordAtPosition) {\n            return { word: '', startColumn: position.column, endColumn: position.column, };\n        }\n        return {\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n            startColumn: wordAtPosition.startColumn,\n            endColumn: position.column,\n        };\n    }\n    // #endregion\n    // #region Language Id handling\n    getLanguageId() {\n        return this._languageId;\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    }\n    setLanguageId(languageId, source = 'api') {\n        if (this._languageId === languageId) {\n            // There's nothing to do\n            return;\n        }\n        const e = {\n            oldLanguage: this._languageId,\n            newLanguage: languageId,\n            source\n        };\n        this._languageId = languageId;\n        this._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n        this.grammarTokens.resetTokenization();\n        this._onDidChangeLanguage.fire(e);\n        this._onDidChangeLanguageConfiguration.fire({});\n    }\n}\nclass GrammarTokens extends Disposable {\n    get backgroundTokenizationState() {\n        return this._backgroundTokenizationState;\n    }\n    constructor(_languageIdCodec, _textModel, getLanguageId, attachedViews) {\n        super();\n        this._languageIdCodec = _languageIdCodec;\n        this._textModel = _textModel;\n        this.getLanguageId = getLanguageId;\n        this._tokenizer = null;\n        this._defaultBackgroundTokenizer = null;\n        this._backgroundTokenizer = this._register(new MutableDisposable());\n        this._tokens = new ContiguousTokensStore(this._languageIdCodec);\n        this._debugBackgroundTokenizer = this._register(new MutableDisposable());\n        this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n        this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this._attachedViewStates = this._register(new DisposableMap());\n        this._register(TokenizationRegistry.onDidChange((e) => {\n            const languageId = this.getLanguageId();\n            if (e.changedLanguages.indexOf(languageId) === -1) {\n                return;\n            }\n            this.resetTokenization();\n        }));\n        this.resetTokenization();\n        this._register(attachedViews.onDidChangeVisibleRanges(({ view, state }) => {\n            if (state) {\n                let existing = this._attachedViewStates.get(view);\n                if (!existing) {\n                    existing = new AttachedViewHandler(() => this.refreshRanges(existing.lineRanges));\n                    this._attachedViewStates.set(view, existing);\n                }\n                existing.handleStateChange(state);\n            }\n            else {\n                this._attachedViewStates.deleteAndDispose(view);\n            }\n        }));\n    }\n    resetTokenization(fireTokenChangeEvent = true) {\n        var _a;\n        this._tokens.flush();\n        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.flush();\n        if (this._debugBackgroundStates) {\n            this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n        }\n        if (fireTokenChangeEvent) {\n            this._onDidChangeTokens.fire({\n                semanticTokensApplied: false,\n                ranges: [\n                    {\n                        fromLineNumber: 1,\n                        toLineNumber: this._textModel.getLineCount(),\n                    },\n                ],\n            });\n        }\n        const initializeTokenization = () => {\n            if (this._textModel.isTooLargeForTokenization()) {\n                return [null, null];\n            }\n            const tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n            if (!tokenizationSupport) {\n                return [null, null];\n            }\n            let initialState;\n            try {\n                initialState = tokenizationSupport.getInitialState();\n            }\n            catch (e) {\n                onUnexpectedError(e);\n                return [null, null];\n            }\n            return [tokenizationSupport, initialState];\n        };\n        const [tokenizationSupport, initialState] = initializeTokenization();\n        if (tokenizationSupport && initialState) {\n            this._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n        }\n        else {\n            this._tokenizer = null;\n        }\n        this._backgroundTokenizer.clear();\n        this._defaultBackgroundTokenizer = null;\n        if (this._tokenizer) {\n            const b = {\n                setTokens: (tokens) => {\n                    this.setTokens(tokens);\n                },\n                backgroundTokenizationFinished: () => {\n                    if (this._backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n                        // We already did a full tokenization and don't go back to progressing.\n                        return;\n                    }\n                    const newState = 2 /* BackgroundTokenizationState.Completed */;\n                    this._backgroundTokenizationState = newState;\n                    this._onDidChangeBackgroundTokenizationState.fire();\n                },\n                setEndState: (lineNumber, state) => {\n                    var _a, _b, _c;\n                    if (!state) {\n                        throw new BugIndicatingError();\n                    }\n                    const firstInvalidEndStateLineNumber = (_b = (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.store.getFirstInvalidEndStateLineNumber()) !== null && _b !== void 0 ? _b : undefined;\n                    if (firstInvalidEndStateLineNumber !== undefined && lineNumber >= firstInvalidEndStateLineNumber) {\n                        // Don't accept states for definitely valid states\n                        (_c = this._tokenizer) === null || _c === void 0 ? void 0 : _c.store.setEndState(lineNumber, state);\n                    }\n                },\n            };\n            if (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n                this._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n            }\n            if (!this._backgroundTokenizer.value) {\n                this._backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n                    new DefaultBackgroundTokenizer(this._tokenizer, b);\n                this._defaultBackgroundTokenizer.handleChanges();\n            }\n            if ((tokenizationSupport === null || tokenizationSupport === void 0 ? void 0 : tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) && tokenizationSupport.createBackgroundTokenizer) {\n                this._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n                this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n                this._debugBackgroundTokenizer.clear();\n                this._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n                    setTokens: (tokens) => {\n                        var _a;\n                        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.setMultilineTokens(tokens, this._textModel);\n                    },\n                    backgroundTokenizationFinished() {\n                        // NO OP\n                    },\n                    setEndState: (lineNumber, state) => {\n                        var _a;\n                        (_a = this._debugBackgroundStates) === null || _a === void 0 ? void 0 : _a.setEndState(lineNumber, state);\n                    },\n                });\n            }\n            else {\n                this._debugBackgroundTokens = undefined;\n                this._debugBackgroundStates = undefined;\n                this._debugBackgroundTokenizer.value = undefined;\n            }\n        }\n        this.refreshAllVisibleLineTokens();\n    }\n    handleDidChangeAttached() {\n        var _a;\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n    }\n    handleDidChangeContent(e) {\n        var _a, _b, _c;\n        if (e.isFlush) {\n            // Don't fire the event, as the view might not have got the text change event yet\n            this.resetTokenization(false);\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength] = countEOL(c.text);\n                this._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n                (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.acceptEdit(c.range, eolCount, firstLineLength);\n            }\n            (_b = this._debugBackgroundStates) === null || _b === void 0 ? void 0 : _b.acceptChanges(e.changes);\n            if (this._tokenizer) {\n                this._tokenizer.store.acceptChanges(e.changes);\n            }\n            (_c = this._defaultBackgroundTokenizer) === null || _c === void 0 ? void 0 : _c.handleChanges();\n        }\n    }\n    setTokens(tokens) {\n        const { changes } = this._tokens.setMultilineTokens(tokens, this._textModel);\n        if (changes.length > 0) {\n            this._onDidChangeTokens.fire({ semanticTokensApplied: false, ranges: changes, });\n        }\n        return { changes: changes };\n    }\n    refreshAllVisibleLineTokens() {\n        const ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n        this.refreshRanges(ranges);\n    }\n    refreshRanges(ranges) {\n        for (const range of ranges) {\n            this.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n        }\n    }\n    refreshRange(startLineNumber, endLineNumber) {\n        var _a, _b;\n        if (!this._tokenizer) {\n            return;\n        }\n        startLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n        endLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n        const builder = new ContiguousMultilineTokensBuilder();\n        const { heuristicTokens } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n        const changedTokens = this.setTokens(builder.finalize());\n        if (heuristicTokens) {\n            // We overrode tokens with heuristically computed ones.\n            // Because old states might get reused (thus stopping invalidation),\n            // we have to explicitly request the tokens for the changed ranges again.\n            for (const c of changedTokens.changes) {\n                (_a = this._backgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n            }\n        }\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    forceTokenization(lineNumber) {\n        var _a, _b;\n        const builder = new ContiguousMultilineTokensBuilder();\n        (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.updateTokensUntilLine(builder, lineNumber);\n        this.setTokens(builder.finalize());\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    isCheapToTokenize(lineNumber) {\n        if (!this._tokenizer) {\n            return true;\n        }\n        return this._tokenizer.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        if (this.isCheapToTokenize(lineNumber)) {\n            this.forceTokenization(lineNumber);\n        }\n    }\n    getLineTokens(lineNumber) {\n        var _a;\n        const lineText = this._textModel.getLineContent(lineNumber);\n        const result = this._tokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n        if (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n            if (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n                const backgroundResult = this._debugBackgroundTokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n                if (!result.equals(backgroundResult) && ((_a = this._debugBackgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.reportMismatchingTokens)) {\n                    this._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n                }\n            }\n        }\n        return result;\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        if (!this._tokenizer) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        this.forceTokenization(position.lineNumber);\n        return this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        if (!this._tokenizer) {\n            return null;\n        }\n        const validatedPosition = this._textModel.validatePosition(position);\n        this.forceTokenization(validatedPosition.lineNumber);\n        return this._tokenizer.tokenizeLineWithEdit(validatedPosition, length, newText);\n    }\n    get hasTokens() {\n        return this._tokens.hasTokens;\n    }\n}\nclass AttachedViewHandler extends Disposable {\n    get lineRanges() { return this._lineRanges; }\n    constructor(_refreshTokens) {\n        super();\n        this._refreshTokens = _refreshTokens;\n        this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n        this._computedLineRanges = [];\n        this._lineRanges = [];\n    }\n    update() {\n        if (equals(this._computedLineRanges, this._lineRanges)) {\n            return;\n        }\n        this._computedLineRanges = this._lineRanges;\n        this._refreshTokens();\n    }\n    handleStateChange(state) {\n        this._lineRanges = state.visibleLineRanges;\n        if (state.stabilized) {\n            this.runner.cancel();\n            this.update();\n        }\n        else {\n            this.runner.schedule();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation } from '../core/indentation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { LineRange } from '../core/lineRange.js';\nexport function createTextBufferFactory(text) {\n    const builder = new PieceTreeTextBufferBuilder();\n    builder.acceptChunk(text);\n    return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n    const builder = new PieceTreeTextBufferBuilder();\n    let chunk;\n    while (typeof (chunk = snapshot.read()) === 'string') {\n        builder.acceptChunk(chunk);\n    }\n    return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n    let factory;\n    if (typeof value === 'string') {\n        factory = createTextBufferFactory(value);\n    }\n    else if (model.isITextSnapshot(value)) {\n        factory = createTextBufferFactoryFromSnapshot(value);\n    }\n    else {\n        factory = value;\n    }\n    return factory.create(defaultEOL);\n}\nlet MODEL_ID = 0;\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nclass TextModelSnapshot {\n    constructor(source) {\n        this._source = source;\n        this._eos = false;\n    }\n    read() {\n        if (this._eos) {\n            return null;\n        }\n        const result = [];\n        let resultCnt = 0;\n        let resultLength = 0;\n        do {\n            const tmp = this._source.read();\n            if (tmp === null) {\n                // end-of-stream\n                this._eos = true;\n                if (resultCnt === 0) {\n                    return null;\n                }\n                else {\n                    return result.join('');\n                }\n            }\n            if (tmp.length > 0) {\n                result[resultCnt++] = tmp;\n                resultLength += tmp.length;\n            }\n            if (resultLength >= 64 * 1024) {\n                return result.join('');\n            }\n        } while (true);\n    }\n}\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport let TextModel = class TextModel extends Disposable {\n    static resolveOptions(textBuffer, options) {\n        if (options.detectIndentation) {\n            const guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n            return new model.TextModelResolvedOptions({\n                tabSize: guessedIndentation.tabSize,\n                indentSize: 'tabSize',\n                insertSpaces: guessedIndentation.insertSpaces,\n                trimAutoWhitespace: options.trimAutoWhitespace,\n                defaultEOL: options.defaultEOL,\n                bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n            });\n        }\n        return new model.TextModelResolvedOptions(options);\n    }\n    get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n    get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n    get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n    onDidChangeContent(listener) {\n        return this._eventEmitter.slowEvent((e) => listener(e.contentChangedEvent));\n    }\n    onDidChangeContentOrInjectedText(listener) {\n        return combinedDisposable(this._eventEmitter.fastEvent(e => listener(e)), this._onDidChangeInjectedText.event(e => listener(e)));\n    }\n    _isDisposing() { return this.__isDisposing; }\n    get tokenization() { return this._tokenizationTextModelPart; }\n    get bracketPairs() { return this._bracketPairs; }\n    get guides() { return this._guidesTextModelPart; }\n    constructor(source, languageIdOrSelection, creationOptions, associatedResource = null, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        //#region Events\n        this._onWillDispose = this._register(new Emitter());\n        this.onWillDispose = this._onWillDispose.event;\n        this._onDidChangeDecorations = this._register(new DidChangeDecorationsEmitter(affectedInjectedTextLines => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)));\n        this.onDidChangeDecorations = this._onDidChangeDecorations.event;\n        this._onDidChangeOptions = this._register(new Emitter());\n        this.onDidChangeOptions = this._onDidChangeOptions.event;\n        this._onDidChangeAttached = this._register(new Emitter());\n        this.onDidChangeAttached = this._onDidChangeAttached.event;\n        this._onDidChangeInjectedText = this._register(new Emitter());\n        this._eventEmitter = this._register(new DidChangeContentEmitter());\n        this._languageSelectionListener = this._register(new MutableDisposable());\n        this._deltaDecorationCallCnt = 0;\n        this._attachedViews = new AttachedViews();\n        // Generate a new unique model id\n        MODEL_ID++;\n        this.id = '$model' + MODEL_ID;\n        this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\n            this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n        }\n        else {\n            this._associatedResource = associatedResource;\n        }\n        this._attachedEditorCount = 0;\n        const { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n        this._buffer = textBuffer;\n        this._bufferDisposable = disposable;\n        this._options = TextModel.resolveOptions(this._buffer, creationOptions);\n        const languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        if (typeof languageIdOrSelection !== 'string') {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n        }\n        this._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n        this._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n        this._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n        this._tokenizationTextModelPart = new TokenizationTextModelPart(this._languageService, this._languageConfigurationService, this, this._bracketPairs, languageId, this._attachedViews);\n        const bufferLineCount = this._buffer.getLineCount();\n        const bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\n        // If a model is too large at construction time, it will never get tokenized,\n        // under no circumstances.\n        if (creationOptions.largeFileOptimizations) {\n            this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\n        }\n        else {\n            this._isTooLargeForTokenization = false;\n        }\n        this._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n        this._versionId = 1;\n        this._alternativeVersionId = 1;\n        this._initialUndoRedoSnapshot = null;\n        this._isDisposed = false;\n        this.__isDisposing = false;\n        this._instanceId = strings.singleLetterHash(MODEL_ID);\n        this._lastDecorationId = 0;\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        this._commandManager = new EditStack(this, this._undoRedoService);\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._trimAutoWhitespaceLines = null;\n        this._register(this._decorationProvider.onDidChange(() => {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._onDidChangeDecorations.fire();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }));\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    dispose() {\n        this.__isDisposing = true;\n        this._onWillDispose.fire();\n        this._tokenizationTextModelPart.dispose();\n        this._isDisposed = true;\n        super.dispose();\n        this._bufferDisposable.dispose();\n        this.__isDisposing = false;\n        // Manually release reference to previous text buffer to avoid large leaks\n        // in case someone leaks a TextModel reference\n        const emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n        emptyDisposedTextBuffer.dispose();\n        this._buffer = emptyDisposedTextBuffer;\n        this._bufferDisposable = Disposable.None;\n    }\n    _assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('Model is disposed!');\n        }\n    }\n    _emitContentChangedEvent(rawChange, change) {\n        if (this.__isDisposing) {\n            // Do not confuse listeners by emitting any event after disposing\n            return;\n        }\n        this._tokenizationTextModelPart.handleDidChangeContent(change);\n        this._bracketPairs.handleDidChangeContent(change);\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n    setValue(value) {\n        this._assertNotDisposed();\n        if (value === null || value === undefined) {\n            throw illegalArgument();\n        }\n        const { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n        this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n    _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush, isEolChange) {\n        return {\n            changes: [{\n                    range: range,\n                    rangeOffset: rangeOffset,\n                    rangeLength: rangeLength,\n                    text: text,\n                }],\n            eol: this._buffer.getEOL(),\n            isEolChange: isEolChange,\n            versionId: this.getVersionId(),\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n    _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n        this._assertNotDisposed();\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._buffer = textBuffer;\n        this._bufferDisposable.dispose();\n        this._bufferDisposable = textBufferDisposable;\n        this._increaseVersionId();\n        // Destroy all my decorations\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        // Destroy my edit history and settings\n        this._commandManager.clear();\n        this._trimAutoWhitespaceLines = null;\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawFlush()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true, false));\n    }\n    setEOL(eol) {\n        this._assertNotDisposed();\n        const newEOL = (eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n');\n        if (this._buffer.getEOL() === newEOL) {\n            // Nothing to do\n            return;\n        }\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._onBeforeEOLChange();\n        this._buffer.setEOL(newEOL);\n        this._increaseVersionId();\n        this._onAfterEOLChange();\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawEOLChanged()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false, true));\n    }\n    _onBeforeEOLChange() {\n        // Ensure all decorations get their `range` set.\n        this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n    _onAfterEOLChange() {\n        // Transform back `range` to offsets\n        const versionId = this.getVersionId();\n        const allDecorations = this._decorationsTree.collectNodesPostOrder();\n        for (let i = 0, len = allDecorations.length; i < len; i++) {\n            const node = allDecorations[i];\n            const range = node.range; // the range is defined due to `_onBeforeEOLChange`\n            const delta = node.cachedAbsoluteStart - node.start;\n            const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.cachedAbsoluteStart = startOffset;\n            node.cachedAbsoluteEnd = endOffset;\n            node.cachedVersionId = versionId;\n            node.start = startOffset - delta;\n            node.end = endOffset - delta;\n            recomputeMaxEnd(node);\n        }\n    }\n    onBeforeAttached() {\n        this._attachedEditorCount++;\n        if (this._attachedEditorCount === 1) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        return this._attachedViews.attachView();\n    }\n    onBeforeDetached(view) {\n        this._attachedEditorCount--;\n        if (this._attachedEditorCount === 0) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        this._attachedViews.detachView(view);\n    }\n    isAttachedToEditor() {\n        return this._attachedEditorCount > 0;\n    }\n    getAttachedEditorCount() {\n        return this._attachedEditorCount;\n    }\n    isTooLargeForSyncing() {\n        return this._isTooLargeForSyncing;\n    }\n    isTooLargeForTokenization() {\n        return this._isTooLargeForTokenization;\n    }\n    isDisposed() {\n        return this._isDisposed;\n    }\n    isDominatedByLongLines() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForTokenization()) {\n            // Cannot word wrap huge files anyways, so it doesn't really matter\n            return false;\n        }\n        let smallLineCharCount = 0;\n        let longLineCharCount = 0;\n        const lineCount = this._buffer.getLineCount();\n        for (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n            const lineLength = this._buffer.getLineLength(lineNumber);\n            if (lineLength >= LONG_LINE_BOUNDARY) {\n                longLineCharCount += lineLength;\n            }\n            else {\n                smallLineCharCount += lineLength;\n            }\n        }\n        return (longLineCharCount > smallLineCharCount);\n    }\n    get uri() {\n        return this._associatedResource;\n    }\n    //#region Options\n    getOptions() {\n        this._assertNotDisposed();\n        return this._options;\n    }\n    getFormattingOptions() {\n        return {\n            tabSize: this._options.indentSize,\n            insertSpaces: this._options.insertSpaces\n        };\n    }\n    updateOptions(_newOpts) {\n        this._assertNotDisposed();\n        const tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n        const indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n        const insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n        const trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n        const bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n        const newOpts = new model.TextModelResolvedOptions({\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            defaultEOL: this._options.defaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            bracketPairColorizationOptions,\n        });\n        if (this._options.equals(newOpts)) {\n            return;\n        }\n        const e = this._options.createChangeEvent(newOpts);\n        this._options = newOpts;\n        this._bracketPairs.handleDidChangeOptions(e);\n        this._decorationProvider.handleDidChangeOptions(e);\n        this._onDidChangeOptions.fire(e);\n    }\n    detectIndentation(defaultInsertSpaces, defaultTabSize) {\n        this._assertNotDisposed();\n        const guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n        this.updateOptions({\n            insertSpaces: guessedIndentation.insertSpaces,\n            tabSize: guessedIndentation.tabSize,\n            indentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n        });\n    }\n    normalizeIndentation(str) {\n        this._assertNotDisposed();\n        return normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n    getVersionId() {\n        this._assertNotDisposed();\n        return this._versionId;\n    }\n    mightContainRTL() {\n        return this._buffer.mightContainRTL();\n    }\n    mightContainUnusualLineTerminators() {\n        return this._buffer.mightContainUnusualLineTerminators();\n    }\n    removeUnusualLineTerminators(selections = null) {\n        const matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        this._buffer.resetMightContainUnusualLineTerminators();\n        this.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n    }\n    mightContainNonBasicASCII() {\n        return this._buffer.mightContainNonBasicASCII();\n    }\n    getAlternativeVersionId() {\n        this._assertNotDisposed();\n        return this._alternativeVersionId;\n    }\n    getInitialUndoRedoSnapshot() {\n        this._assertNotDisposed();\n        return this._initialUndoRedoSnapshot;\n    }\n    getOffsetAt(rawPosition) {\n        this._assertNotDisposed();\n        const position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n    getPositionAt(rawOffset) {\n        this._assertNotDisposed();\n        const offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n        return this._buffer.getPositionAt(offset);\n    }\n    _increaseVersionId() {\n        this._versionId = this._versionId + 1;\n        this._alternativeVersionId = this._versionId;\n    }\n    _overwriteVersionId(versionId) {\n        this._versionId = versionId;\n    }\n    _overwriteAlternativeVersionId(newAlternativeVersionId) {\n        this._alternativeVersionId = newAlternativeVersionId;\n    }\n    _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n        this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n    getValue(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM() + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    createSnapshot(preserveBOM = false) {\n        return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n    getValueLength(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM().length + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    getValueInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n    getValueLengthInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n    getCharacterCountInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n    getLineCount() {\n        this._assertNotDisposed();\n        return this._buffer.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber);\n    }\n    getLinesContent() {\n        this._assertNotDisposed();\n        return this._buffer.getLinesContent();\n    }\n    getEOL() {\n        this._assertNotDisposed();\n        return this._buffer.getEOL();\n    }\n    getEndOfLineSequence() {\n        this._assertNotDisposed();\n        return (this._buffer.getEOL() === '\\n'\n            ? 0 /* model.EndOfLineSequence.LF */\n            : 1 /* model.EndOfLineSequence.CRLF */);\n    }\n    getLineMinColumn(lineNumber) {\n        this._assertNotDisposed();\n        return 1;\n    }\n    getLineMaxColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber) + 1;\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n    _validateRangeRelaxedNoAllocations(range) {\n        const linesCount = this._buffer.getLineCount();\n        const initialStartLineNumber = range.startLineNumber;\n        const initialStartColumn = range.startColumn;\n        let startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n        let startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n        if (startLineNumber < 1) {\n            startLineNumber = 1;\n            startColumn = 1;\n        }\n        else if (startLineNumber > linesCount) {\n            startLineNumber = linesCount;\n            startColumn = this.getLineMaxColumn(startLineNumber);\n        }\n        else {\n            if (startColumn <= 1) {\n                startColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(startLineNumber);\n                if (startColumn >= maxColumn) {\n                    startColumn = maxColumn;\n                }\n            }\n        }\n        const initialEndLineNumber = range.endLineNumber;\n        const initialEndColumn = range.endColumn;\n        let endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n        let endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n        if (endLineNumber < 1) {\n            endLineNumber = 1;\n            endColumn = 1;\n        }\n        else if (endLineNumber > linesCount) {\n            endLineNumber = linesCount;\n            endColumn = this.getLineMaxColumn(endLineNumber);\n        }\n        else {\n            if (endColumn <= 1) {\n                endColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(endLineNumber);\n                if (endColumn >= maxColumn) {\n                    endColumn = maxColumn;\n                }\n            }\n        }\n        if (initialStartLineNumber === startLineNumber\n            && initialStartColumn === startColumn\n            && initialEndLineNumber === endLineNumber\n            && initialEndColumn === endColumn\n            && range instanceof Range\n            && !(range instanceof Selection)) {\n            return range;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    _isValidPosition(lineNumber, column, validationType) {\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n            return false;\n        }\n        if (isNaN(lineNumber) || isNaN(column)) {\n            return false;\n        }\n        if (lineNumber < 1 || column < 1) {\n            return false;\n        }\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n            return false;\n        }\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber > lineCount) {\n            return false;\n        }\n        if (column === 1) {\n            return true;\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column > maxColumn) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _validatePosition(_lineNumber, _column, validationType) {\n        const lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n        const column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber < 1) {\n            return new Position(1, 1);\n        }\n        if (lineNumber > lineCount) {\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\n        }\n        if (column <= 1) {\n            return new Position(lineNumber, 1);\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column >= maxColumn) {\n            return new Position(lineNumber, maxColumn);\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // If the position would end up in the middle of a high-low surrogate pair,\n            // we move it to before the pair\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return new Position(lineNumber, column - 1);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    validatePosition(position) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if (position instanceof Position) {\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n                return position;\n            }\n        }\n        return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n    _isValidRange(range, validationType) {\n        const startLineNumber = range.startLineNumber;\n        const startColumn = range.startColumn;\n        const endLineNumber = range.endLineNumber;\n        const endColumn = range.endColumn;\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    validateRange(_range) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\n            if (this._isValidRange(_range, validationType)) {\n                return _range;\n            }\n        }\n        const start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const startLineNumber = start.lineNumber;\n        const startColumn = start.column;\n        const endLineNumber = end.lineNumber;\n        const endColumn = end.column;\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\n                // do not expand a collapsed range, simply move it to a valid location\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n            }\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\n                // expand range at both ends\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n            }\n            if (startInsideSurrogatePair) {\n                // only expand range at the start\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n            }\n            // only expand range at the end\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    modifyPosition(rawPosition, offset) {\n        this._assertNotDisposed();\n        const candidate = this.getOffsetAt(rawPosition) + offset;\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n    getFullModelRange() {\n        this._assertNotDisposed();\n        const lineCount = this.getLineCount();\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount = LIMIT_FIND_COUNT) {\n        this._assertNotDisposed();\n        let searchRanges = null;\n        if (rawSearchScope !== null) {\n            if (!Array.isArray(rawSearchScope)) {\n                rawSearchScope = [rawSearchScope];\n            }\n            if (rawSearchScope.every((searchScope) => Range.isIRange(searchScope))) {\n                searchRanges = rawSearchScope.map((searchScope) => this.validateRange(searchScope));\n            }\n        }\n        if (searchRanges === null) {\n            searchRanges = [this.getFullModelRange()];\n        }\n        searchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n        const uniqueSearchRanges = [];\n        uniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n            if (Range.areIntersecting(prev, curr)) {\n                return prev.plusRange(curr);\n            }\n            uniqueSearchRanges.push(prev);\n            return curr;\n        }));\n        let matchMapper;\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            // not regex, not multi line\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return [];\n            }\n            matchMapper = (searchRange) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        }\n        else {\n            matchMapper = (searchRange) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        }\n        return uniqueSearchRanges.map(matchMapper).reduce((arr, matches) => arr.concat(matches), []);\n    }\n    findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return null;\n            }\n            const lineCount = this.getLineCount();\n            let searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n            let ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            return null;\n        }\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n    pushStackElement() {\n        this._commandManager.pushStackElement();\n    }\n    popStackElement() {\n        this._commandManager.popStackElement();\n    }\n    pushEOL(eol) {\n        const currentEOL = (this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */);\n        if (currentEOL === eol) {\n            return;\n        }\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            if (this._initialUndoRedoSnapshot === null) {\n                this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n            }\n            this._commandManager.pushEOL(eol);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _validateEditOperation(rawOperation) {\n        if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n            return rawOperation;\n        }\n        return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n    _validateEditOperations(rawOperations) {\n        const result = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            result[i] = this._validateEditOperation(rawOperations[i]);\n        }\n        return result;\n    }\n    pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n            // Go through each saved line number and insert a trim whitespace edit\n            // if it is safe to do so (no conflicts with other edits).\n            const incomingEdits = editOperations.map((op) => {\n                return {\n                    range: this.validateRange(op.range),\n                    text: op.text\n                };\n            });\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n            let editsAreNearCursors = true;\n            if (beforeCursorState) {\n                for (let i = 0, len = beforeCursorState.length; i < len; i++) {\n                    const sel = beforeCursorState[i];\n                    let foundEditNearSel = false;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n                        const selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n                        if (!selIsAbove && !selIsBelow) {\n                            foundEditNearSel = true;\n                            break;\n                        }\n                    }\n                    if (!foundEditNearSel) {\n                        editsAreNearCursors = false;\n                        break;\n                    }\n                }\n            }\n            if (editsAreNearCursors) {\n                for (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n                    const trimLineNumber = this._trimAutoWhitespaceLines[i];\n                    const maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n                    let allowTrimLine = true;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const editText = incomingEdits[j].text;\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n                            // `trimLine` is completely outside this edit\n                            continue;\n                        }\n                        // At this point:\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\n                            continue;\n                        }\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\n                            continue;\n                        }\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\n                        allowTrimLine = false;\n                        break;\n                    }\n                    if (allowTrimLine) {\n                        const trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n                        editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n                    }\n                }\n            }\n            this._trimAutoWhitespaceLines = null;\n        }\n        if (this._initialUndoRedoSnapshot === null) {\n            this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group);\n    }\n    _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.newPosition);\n            const rangeEnd = this.getPositionAt(change.newEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.oldText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.oldPosition);\n            const rangeEnd = this.getPositionAt(change.oldEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.newText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            this._isUndoing = isUndoing;\n            this._isRedoing = isRedoing;\n            this.applyEdits(edits, false);\n            this.setEOL(eol);\n            this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n        }\n        finally {\n            this._isUndoing = false;\n            this._isRedoing = false;\n            this._eventEmitter.endDeferredEmit(resultingSelection);\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    applyEdits(rawOperations, computeUndoEdits = false) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            const operations = this._validateEditOperations(rawOperations);\n            return this._doApplyEdits(operations, computeUndoEdits);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _doApplyEdits(rawOperations, computeUndoEdits) {\n        const oldLineCount = this._buffer.getLineCount();\n        const result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n        const newLineCount = this._buffer.getLineCount();\n        const contentChanges = result.changes;\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n        if (contentChanges.length !== 0) {\n            // We do a first pass to update decorations\n            // because we want to read decorations in the second pass\n            // where we will emit content change events\n            // and we want to read the final decorations\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n            }\n            const rawContentChanges = [];\n            this._increaseVersionId();\n            let lineCount = oldLineCount;\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount] = countEOL(change.text);\n                this._onDidChangeDecorations.fire();\n                const startLineNumber = change.range.startLineNumber;\n                const endLineNumber = change.range.endLineNumber;\n                const deletingLinesCnt = endLineNumber - startLineNumber;\n                const insertingLinesCnt = eolCount;\n                const editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n                const changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n                const currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n                const firstEditLineNumber = currentEditStartLineNumber;\n                const lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n                const decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n                const injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n                const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                for (let j = editingLinesCnt; j >= 0; j--) {\n                    const editLineNumber = startLineNumber + j;\n                    const currentEditLineNumber = currentEditStartLineNumber + j;\n                    injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n                    const decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n                }\n                if (editingLinesCnt < deletingLinesCnt) {\n                    // Must delete some lines\n                    const spliceStartLineNumber = startLineNumber + editingLinesCnt;\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n                }\n                if (editingLinesCnt < insertingLinesCnt) {\n                    const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                    // Must insert some lines\n                    const spliceLineNumber = startLineNumber + editingLinesCnt;\n                    const cnt = insertingLinesCnt - editingLinesCnt;\n                    const fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n                    const injectedTexts = [];\n                    const newLines = [];\n                    for (let i = 0; i < cnt; i++) {\n                        const lineNumber = fromLineNumber + i;\n                        newLines[i] = this.getLineContent(lineNumber);\n                        injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n                        injectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n                    }\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n                }\n                lineCount += changeLineCountDelta;\n            }\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n                changes: contentChanges,\n                eol: this._buffer.getEOL(),\n                isEolChange: false,\n                versionId: this.getVersionId(),\n                isUndoing: this._isUndoing,\n                isRedoing: this._isRedoing,\n                isFlush: false\n            });\n        }\n        return (result.reverseEdits === null ? undefined : result.reverseEdits);\n    }\n    undo() {\n        return this._undoRedoService.undo(this.uri);\n    }\n    canUndo() {\n        return this._undoRedoService.canUndo(this.uri);\n    }\n    redo() {\n        return this._undoRedoService.redo(this.uri);\n    }\n    canRedo() {\n        return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n    handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n        // This is called before the decoration changed event is fired.\n        if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n            return;\n        }\n        const affectedLines = Array.from(affectedInjectedTextLines);\n        const lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n        this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n    changeDecorations(callback, ownerId = 0) {\n        this._assertNotDisposed();\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._changeDecorations(ownerId, callback);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _changeDecorations(ownerId, callback) {\n        const changeAccessor = {\n            addDecoration: (range, options) => {\n                return this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n            },\n            changeDecoration: (id, newRange) => {\n                this._changeDecorationImpl(id, newRange);\n            },\n            changeDecorationOptions: (id, options) => {\n                this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n            },\n            removeDecoration: (id) => {\n                this._deltaDecorationsImpl(ownerId, [id], []);\n            },\n            deltaDecorations: (oldDecorations, newDecorations) => {\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\n                    // nothing to do\n                    return [];\n                }\n                return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n            }\n        };\n        let result = null;\n        try {\n            result = callback(changeAccessor);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n        // Invalidate change accessor\n        changeAccessor.addDecoration = invalidFunc;\n        changeAccessor.changeDecoration = invalidFunc;\n        changeAccessor.changeDecorationOptions = invalidFunc;\n        changeAccessor.removeDecoration = invalidFunc;\n        changeAccessor.deltaDecorations = invalidFunc;\n        return result;\n    }\n    deltaDecorations(oldDecorations, newDecorations, ownerId = 0) {\n        this._assertNotDisposed();\n        if (!oldDecorations) {\n            oldDecorations = [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n        }\n        try {\n            this._deltaDecorationCallCnt++;\n            if (this._deltaDecorationCallCnt > 1) {\n                console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n                onUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n            }\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n            this._deltaDecorationCallCnt--;\n        }\n    }\n    _getTrackedRange(id) {\n        return this.getDecorationRange(id);\n    }\n    _setTrackedRange(id, newRange, newStickiness) {\n        const node = (id ? this._decorations[id] : null);\n        if (!node) {\n            if (!newRange) {\n                // node doesn't exist, the request is to delete => nothing to do\n                return null;\n            }\n            // node doesn't exist, the request is to set => add the tracked range\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }], true)[0];\n        }\n        if (!newRange) {\n            // node exists, the request is to delete => delete node\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n            return null;\n        }\n        // node exists, the request is to set => change the tracked range and its options\n        const range = this._validateRangeRelaxedNoAllocations(newRange);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n        this._decorationsTree.insert(node);\n        return node.id;\n    }\n    removeAllDecorationsWithOwnerId(ownerId) {\n        if (this._isDisposed) {\n            return;\n        }\n        const nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n        }\n    }\n    getDecorationOptions(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return node.options;\n    }\n    getDecorationRange(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return this._decorationsTree.getNodeRange(this, node);\n    }\n    getLineDecorations(lineNumber, ownerId = 0, filterOutValidation = false) {\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            return [];\n        }\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n    getLinesDecorations(_startLineNumber, _endLineNumber, ownerId = 0, filterOutValidation = false, onlyMarginDecorations = false) {\n        const lineCount = this.getLineCount();\n        const startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n        const endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        const range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n        const decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getDecorationsInRange(range, ownerId = 0, filterOutValidation = false, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const validatedRange = this.validateRange(range);\n        const decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n        return decorations;\n    }\n    getOverviewRulerDecorations(ownerId = 0, filterOutValidation = false) {\n        return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true, false);\n    }\n    getInjectedTextDecorations(ownerId = 0) {\n        return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n    _getInjectedTextInLine(lineNumber) {\n        const startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n        const endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n        const result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n        return LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n    }\n    getAllDecorations(ownerId = 0, filterOutValidation = false) {\n        let result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false, false);\n        result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n        return result;\n    }\n    getAllMarginDecorations(ownerId = 0) {\n        return this._decorationsTree.getAll(this, ownerId, false, false, true);\n    }\n    _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n        const endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n        return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, onlyMarginDecorations);\n    }\n    getRangeAt(start, end) {\n        return this._buffer.getRangeAt(start, end - start);\n    }\n    _changeDecorationImpl(decorationId, _range) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        if (node.options.after) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n        }\n        if (node.options.before) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber);\n        }\n        const range = this._validateRangeRelaxedNoAllocations(_range);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        this._decorationsTree.insert(node);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        if (node.options.after) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n        }\n        if (node.options.before) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n        }\n    }\n    _changeDecorationOptionsImpl(decorationId, options) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        const nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n        const nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        this._onDidChangeDecorations.checkAffectedAndFire(options);\n        if (node.options.after || options.after) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n        }\n        if (node.options.before || options.before) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n        }\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n            // Delete + Insert due to an overview ruler status change\n            this._decorationsTree.delete(node);\n            node.setOptions(options);\n            this._decorationsTree.insert(node);\n        }\n        else {\n            node.setOptions(options);\n        }\n    }\n    _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations, suppressEvents = false) {\n        const versionId = this.getVersionId();\n        const oldDecorationsLen = oldDecorationsIds.length;\n        let oldDecorationIndex = 0;\n        const newDecorationsLen = newDecorations.length;\n        let newDecorationIndex = 0;\n        this._onDidChangeDecorations.beginDeferredEmit();\n        try {\n            const result = new Array(newDecorationsLen);\n            while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n                let node = null;\n                if (oldDecorationIndex < oldDecorationsLen) {\n                    // (1) get ourselves an old node\n                    do {\n                        node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n                    } while (!node && oldDecorationIndex < oldDecorationsLen);\n                    // (2) remove the node from the tree (if it exists)\n                    if (node) {\n                        if (node.options.after) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n                        }\n                        if (node.options.before) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n                        }\n                        this._decorationsTree.delete(node);\n                        if (!suppressEvents) {\n                            this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n                        }\n                    }\n                }\n                if (newDecorationIndex < newDecorationsLen) {\n                    // (3) create a new node if necessary\n                    if (!node) {\n                        const internalDecorationId = (++this._lastDecorationId);\n                        const decorationId = `${this._instanceId};${internalDecorationId}`;\n                        node = new IntervalNode(decorationId, 0, 0);\n                        this._decorations[decorationId] = node;\n                    }\n                    // (4) initialize node\n                    const newDecoration = newDecorations[newDecorationIndex];\n                    const range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n                    const options = _normalizeOptions(newDecoration.options);\n                    const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n                    const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n                    node.ownerId = ownerId;\n                    node.reset(versionId, startOffset, endOffset, range);\n                    node.setOptions(options);\n                    if (node.options.after) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n                    }\n                    if (node.options.before) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n                    }\n                    if (!suppressEvents) {\n                        this._onDidChangeDecorations.checkAffectedAndFire(options);\n                    }\n                    this._decorationsTree.insert(node);\n                    result[newDecorationIndex] = node.id;\n                    newDecorationIndex++;\n                }\n                else {\n                    if (node) {\n                        delete this._decorations[node.id];\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n    getLanguageId() {\n        return this.tokenization.getLanguageId();\n    }\n    setLanguage(languageIdOrSelection, source) {\n        if (typeof languageIdOrSelection === 'string') {\n            this._languageSelectionListener.clear();\n            this._setLanguage(languageIdOrSelection, source);\n        }\n        else {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId, source));\n            this._setLanguage(languageIdOrSelection.languageId, source);\n        }\n    }\n    _setLanguage(languageId, source) {\n        this.tokenization.setLanguageId(languageId, source);\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n    getWordAtPosition(position) {\n        return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n    getWordUntilPosition(position) {\n        return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n    normalizePosition(position, affinity) {\n        return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        // Columns start with 1.\n        return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n};\nTextModel._MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n    bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n};\nTextModel = __decorate([\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService)\n], TextModel);\nfunction indentOfLine(line) {\n    let indent = 0;\n    for (const c of line) {\n        if (c === ' ' || c === '\\t') {\n            indent++;\n        }\n        else {\n            break;\n        }\n    }\n    return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n    return (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\nfunction isNodeInjectedText(node) {\n    return !!node.options.after || !!node.options.before;\n}\nclass DecorationsTrees {\n    constructor() {\n        this._decorationsTree0 = new IntervalTree();\n        this._decorationsTree1 = new IntervalTree();\n        this._injectedTextDecorationsTree = new IntervalTree();\n    }\n    ensureAllNodesHaveRanges(host) {\n        this.getAll(host, 0, false, false, false);\n    }\n    _ensureNodesHaveRanges(host, nodes) {\n        for (const node of nodes) {\n            if (node.range === null) {\n                node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n            }\n        }\n        return nodes;\n    }\n    getAllInInterval(host, start, end, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n        const r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        return r0.concat(r1).concat(r2);\n    }\n    getInjectedTextInInterval(host, start, end, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAllInjectedText(host, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId, onlyMarginDecorations) {\n        if (overviewRulerOnly) {\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        }\n        else {\n            const r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            return r0.concat(r1).concat(r2);\n        }\n    }\n    collectNodesFromOwner(ownerId) {\n        const r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n        const r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n        const r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n        return r0.concat(r1).concat(r2);\n    }\n    collectNodesPostOrder() {\n        const r0 = this._decorationsTree0.collectNodesPostOrder();\n        const r1 = this._decorationsTree1.collectNodesPostOrder();\n        const r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n        return r0.concat(r1).concat(r2);\n    }\n    insert(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.insert(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.insert(node);\n        }\n        else {\n            this._decorationsTree0.insert(node);\n        }\n    }\n    delete(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.delete(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.delete(node);\n        }\n        else {\n            this._decorationsTree0.delete(node);\n        }\n    }\n    getNodeRange(host, node) {\n        const versionId = host.getVersionId();\n        if (node.cachedVersionId !== versionId) {\n            this._resolveNode(node, versionId);\n        }\n        if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n        }\n        return node.range;\n    }\n    _resolveNode(node, cachedVersionId) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\n        }\n        else {\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\n        }\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n}\nfunction cleanClassName(className) {\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nclass DecorationOptions {\n    constructor(options) {\n        this.color = options.color || '';\n        this.darkColor = options.darkColor || '';\n    }\n}\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this._resolvedColor = null;\n        this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = null;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return color;\n        }\n        const c = color ? theme.getColor(color.id) : null;\n        if (!c) {\n            return '';\n        }\n        return c.toString();\n    }\n}\nexport class ModelDecorationGlyphMarginOptions {\n    constructor(options) {\n        var _a;\n        this.position = (_a = options === null || options === void 0 ? void 0 : options.position) !== null && _a !== void 0 ? _a : model.GlyphMarginLane.Left;\n    }\n}\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this.position = options.position;\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = undefined;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return Color.fromHex(color);\n        }\n        return theme.getColor(color.id);\n    }\n}\nexport class ModelDecorationInjectedTextOptions {\n    static from(options) {\n        if (options instanceof ModelDecorationInjectedTextOptions) {\n            return options;\n        }\n        return new ModelDecorationInjectedTextOptions(options);\n    }\n    constructor(options) {\n        this.content = options.content || '';\n        this.inlineClassName = options.inlineClassName || null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.attachedData = options.attachedData || null;\n        this.cursorStops = options.cursorStops || null;\n    }\n}\nexport class ModelDecorationOptions {\n    static register(options) {\n        return new ModelDecorationOptions(options);\n    }\n    static createDynamic(options) {\n        return new ModelDecorationOptions(options);\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e;\n        this.description = options.description;\n        this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n        this.blockDoesNotCollapse = (_a = options.blockDoesNotCollapse) !== null && _a !== void 0 ? _a : null;\n        this.blockIsAfterEnd = (_b = options.blockIsAfterEnd) !== null && _b !== void 0 ? _b : null;\n        this.blockPadding = (_c = options.blockPadding) !== null && _c !== void 0 ? _c : null;\n        this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n        this.zIndex = options.zIndex || 0;\n        this.className = options.className ? cleanClassName(options.className) : null;\n        this.hoverMessage = options.hoverMessage || null;\n        this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n        this.isWholeLine = options.isWholeLine || false;\n        this.showIfCollapsed = options.showIfCollapsed || false;\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n        this.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n        this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n        this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n        this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n        this.hideInCommentTokens = (_d = options.hideInCommentTokens) !== null && _d !== void 0 ? _d : false;\n        this.hideInStringTokens = (_e = options.hideInStringTokens) !== null && _e !== void 0 ? _e : false;\n    }\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n    ModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */ }),\n];\nfunction _normalizeOptions(options) {\n    if (options instanceof ModelDecorationOptions) {\n        return options;\n    }\n    return ModelDecorationOptions.createDynamic(options);\n}\nclass DidChangeDecorationsEmitter extends Disposable {\n    constructor(handleBeforeFire) {\n        super();\n        this.handleBeforeFire = handleBeforeFire;\n        this._actual = this._register(new Emitter());\n        this.event = this._actual.event;\n        this._affectedInjectedTextLines = null;\n        this._deferredCnt = 0;\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit() {\n        var _a;\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._shouldFireDeferred) {\n                this.doFire();\n            }\n            (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n            this._affectedInjectedTextLines = null;\n        }\n    }\n    recordLineAffectedByInjectedText(lineNumber) {\n        if (!this._affectedInjectedTextLines) {\n            this._affectedInjectedTextLines = new Set();\n        }\n        this._affectedInjectedTextLines.add(lineNumber);\n    }\n    checkAffectedAndFire(options) {\n        if (!this._affectsMinimap) {\n            this._affectsMinimap = options.minimap && options.minimap.position ? true : false;\n        }\n        if (!this._affectsOverviewRuler) {\n            this._affectsOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n        }\n        if (!this._affectsGlyphMargin) {\n            this._affectsGlyphMargin = options.glyphMarginClassName ? true : false;\n        }\n        this.tryFire();\n    }\n    fire() {\n        this._affectsMinimap = true;\n        this._affectsOverviewRuler = true;\n        this._affectsGlyphMargin = true;\n        this.tryFire();\n    }\n    tryFire() {\n        if (this._deferredCnt === 0) {\n            this.doFire();\n        }\n        else {\n            this._shouldFireDeferred = true;\n        }\n    }\n    doFire() {\n        this.handleBeforeFire(this._affectedInjectedTextLines);\n        const event = {\n            affectsMinimap: this._affectsMinimap,\n            affectsOverviewRuler: this._affectsOverviewRuler,\n            affectsGlyphMargin: this._affectsGlyphMargin\n        };\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n        this._actual.fire(event);\n    }\n}\n//#endregion\nclass DidChangeContentEmitter extends Disposable {\n    constructor() {\n        super();\n        /**\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n         */\n        this._fastEmitter = this._register(new Emitter());\n        this.fastEvent = this._fastEmitter.event;\n        this._slowEmitter = this._register(new Emitter());\n        this.slowEvent = this._slowEmitter.event;\n        this._deferredCnt = 0;\n        this._deferredEvent = null;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit(resultingSelection = null) {\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._deferredEvent !== null) {\n                this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n                const e = this._deferredEvent;\n                this._deferredEvent = null;\n                this._fastEmitter.fire(e);\n                this._slowEmitter.fire(e);\n            }\n        }\n    }\n    fire(e) {\n        if (this._deferredCnt > 0) {\n            if (this._deferredEvent) {\n                this._deferredEvent = this._deferredEvent.merge(e);\n            }\n            else {\n                this._deferredEvent = e;\n            }\n            return;\n        }\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n    }\n}\n/**\n * @internal\n */\nexport class AttachedViews {\n    constructor() {\n        this._onDidChangeVisibleRanges = new Emitter();\n        this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n        this._views = new Set();\n    }\n    attachView() {\n        const view = new AttachedViewImpl((state) => {\n            this._onDidChangeVisibleRanges.fire({ view, state });\n        });\n        this._views.add(view);\n        return view;\n    }\n    detachView(view) {\n        this._views.delete(view);\n        this._onDidChangeVisibleRanges.fire({ view, state: undefined });\n    }\n}\nclass AttachedViewImpl {\n    constructor(handleStateChange) {\n        this.handleStateChange = handleStateChange;\n    }\n    setVisibleLines(visibleLines, stabilized) {\n        const visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n        this.handleStateChange({ visibleLineRanges, stabilized });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class TextModelPart extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._isDisposed = false;\n    }\n    dispose() {\n        super.dispose();\n        this._isDisposed = true;\n    }\n    assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('TextModelPart is disposed!');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { FindMatch, SearchData } from '../model.js';\nconst LIMIT_FIND_COUNT = 999;\nexport class SearchParams {\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\n        this.searchString = searchString;\n        this.isRegex = isRegex;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    parseSearchRequest() {\n        if (this.searchString === '') {\n            return null;\n        }\n        // Try to create a RegExp out of the params\n        let multiline;\n        if (this.isRegex) {\n            multiline = isMultilineRegexSource(this.searchString);\n        }\n        else {\n            multiline = (this.searchString.indexOf('\\n') >= 0);\n        }\n        let regex = null;\n        try {\n            regex = strings.createRegExp(this.searchString, this.isRegex, {\n                matchCase: this.matchCase,\n                wholeWord: false,\n                multiline: multiline,\n                global: true,\n                unicode: true\n            });\n        }\n        catch (err) {\n            return null;\n        }\n        if (!regex) {\n            return null;\n        }\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n            // casing might make a difference\n            canUseSimpleSearch = this.matchCase;\n        }\n        return new SearchData(regex, this.wordSeparators ? getMapForWordSeparators(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);\n    }\n}\nexport function isMultilineRegexSource(searchString) {\n    if (!searchString || searchString.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = searchString.length; i < len; i++) {\n        const chCode = searchString.charCodeAt(i);\n        if (chCode === 10 /* CharCode.LineFeed */) {\n            return true;\n        }\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = searchString.charCodeAt(i);\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function createFindMatch(range, rawMatches, captureMatches) {\n    if (!captureMatches) {\n        return new FindMatch(range, null);\n    }\n    const matches = [];\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\n        matches[i] = rawMatches[i];\n    }\n    return new FindMatch(range, matches);\n}\nclass LineFeedCounter {\n    constructor(text) {\n        const lineFeedsOffsets = [];\n        let lineFeedsOffsetsLen = 0;\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n            }\n        }\n        this._lineFeedsOffsets = lineFeedsOffsets;\n    }\n    findLineFeedCountBeforeOffset(offset) {\n        const lineFeedsOffsets = this._lineFeedsOffsets;\n        let min = 0;\n        let max = lineFeedsOffsets.length - 1;\n        if (max === -1) {\n            // no line feeds\n            return 0;\n        }\n        if (offset <= lineFeedsOffsets[0]) {\n            // before first line feed\n            return 0;\n        }\n        while (min < max) {\n            const mid = min + ((max - min) / 2 >> 0);\n            if (lineFeedsOffsets[mid] >= offset) {\n                max = mid - 1;\n            }\n            else {\n                if (lineFeedsOffsets[mid + 1] >= offset) {\n                    // bingo!\n                    min = mid;\n                    max = mid;\n                }\n                else {\n                    min = mid + 1;\n                }\n            }\n        }\n        return min + 1;\n    }\n}\nexport class TextModelSearch {\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return [];\n        }\n        if (searchData.regex.multiline) {\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n        }\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Multiline search always executes on the lines concatenated with \\n.\n     * We must therefore compensate for the count of \\n in case the model is CRLF\n     */\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n        let startOffset;\n        let lineFeedCountBeforeMatch = 0;\n        if (lfCounter) {\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            startOffset = deltaOffset + matchIndex;\n        }\n        let endOffset;\n        if (lfCounter) {\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            endOffset = startOffset + match0.length;\n        }\n        const startPosition = model.getPositionAt(startOffset);\n        const endPosition = model.getPositionAt(endOffset);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        const result = [];\n        let counter = 0;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n            if (counter >= limitResultCount) {\n                return result;\n            }\n        }\n        return result;\n    }\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        // Early case for a search range that starts & stops on the same line number\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        // Collect results from first line\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n        // Collect results from middle lines\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        // Collect results from last line\n        if (resultLen < limitResultCount) {\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        return result;\n    }\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const searchTextStart = new Position(searchStart.lineNumber, 1);\n        const deltaOffset = model.getOffsetAt(searchTextStart);\n        const lineCount = model.getLineCount();\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(new Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        searcher.reset(searchStart.column - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n        }\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n            // Try again from the top\n            return this._doFindNextMatchMultiline(model, new Position(1, 1), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber);\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n        // Set regex to search from column\n        searcher.reset(fromColumn - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return null;\n    }\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const matches = this._doFindMatchesMultiline(model, new Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n        if (matches.length > 0) {\n            return matches[matches.length - 1];\n        }\n        const lineCount = model.getLineCount();\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n            // Try again with all content\n            return this._doFindPreviousMatchMultiline(model, new Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n        let bestResult = null;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            bestResult = createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return bestResult;\n    }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex === 0) {\n        // Match starts at start of string\n        return true;\n    }\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n        // The character before the match is a word separator\n        return true;\n    }\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n        // The character before the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The first character inside the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex + matchLength === textLength) {\n        // Match ends at end of string\n        return true;\n    }\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n        // The character after the match is a word separator\n        return true;\n    }\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n        // The character after the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The last character in the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nexport function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\n}\nexport class Searcher {\n    constructor(wordSeparators, searchRegex) {\n        this._wordSeparators = wordSeparators;\n        this._searchRegex = searchRegex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    reset(lastIndex) {\n        this._searchRegex.lastIndex = lastIndex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    next(text) {\n        const textLength = text.length;\n        let m;\n        do {\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n                // Reached the end of the line\n                return null;\n            }\n            m = this._searchRegex.exec(text);\n            if (!m) {\n                return null;\n            }\n            const matchStartIndex = m.index;\n            const matchLength = m[0].length;\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n                if (matchLength === 0) {\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n                    if (strings.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n                        this._searchRegex.lastIndex += 2;\n                    }\n                    else {\n                        this._searchRegex.lastIndex += 1;\n                    }\n                    continue;\n                }\n                // Exit early if the regex matches the same range twice\n                return null;\n            }\n            this._prevMatchStartIndex = matchStartIndex;\n            this._prevMatchLength = matchLength;\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n                return m;\n            }\n        } while (m);\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Returns:\n *  - -1 => the line consists of whitespace\n *  - otherwise => the indent level is returned value\n */\nexport function computeIndentLevel(line, tabSize) {\n    let indent = 0;\n    let i = 0;\n    const len = line.length;\n    while (i < len) {\n        const chCode = line.charCodeAt(i);\n        if (chCode === 32 /* CharCode.Space */) {\n            indent++;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            indent = indent - indent % tabSize + tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    if (i === len) {\n        return -1; // line only consists of whitespace\n    }\n    return indent;\n}\n"],"names":["MirrorTextModel","constructor","uri","lines","eol","versionId","this","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","dispose","length","version","getText","join","onEvents","e","changes","change","_acceptDeleteRange","range","_acceptInsertText","Position","startLineNumber","startColumn","text","_ensureLineStarts","eolLength","linesLength","lineStartValues","Uint32Array","i","PrefixSumComputer","_setLineText","lineIndex","newValue","setValue","endLineNumber","substring","endColumn","splice","removeValues","position","insertText","insertLines","splitLines","lineNumber","column","newLengths","insertValues","values","prefixSum","prefixSumValidIndex","Int32Array","insertIndex","toUint32","oldValues","oldPrefixSum","insertValuesLen","set","subarray","index","value","startIndex","count","maxCount","getTotalSum","_getPrefixSum","getPrefixSum","Math","max","getIndexOf","sum","floor","low","high","mid","midStop","midStart","PrefixSumIndexOfResult","ConstantTimePrefixSumComputer","_values","_isValid","_validEndIndex","_prefixSum","_indexBySum","_ensureValid","idx","viewLinesAbove","start","deleteCount","_invalidate","insertArr","arrayInsert","min","len","sumAbove","j","remainder","_prefixSumIndexOfResultBrand","undefined","TreeNode","piece","color","size_left","lf_left","parent","left","right","next","SENTINEL","leftest","node","prev","righttest","detach","calculateSize","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta","AverageBufferSize","createUintArray","arr","r","Uint16Array","LineStarts","lineStarts","cr","lf","crlf","isBasicASCII","createLineStartsFast","str","readonly","arguments","rLength","chr","charCodeAt","Piece","bufferIndex","end","StringBuffer","buffer","PieceTreeSnapshot","BOM","_pieces","_tree","_BOM","_index","iterate","push","read","getPieceContent","PieceTreeSearchCache","limit","_limit","_cache","get","offset","nodePos","nodeStartOffset","get2","nodeStartLineNumber","nodePosition","shift","validate","hasInvalidVal","tmp","newArr","entry","PieceTreeBase","chunks","eolNormalized","create","_buffers","_lastChangeBufferPos","line","_lineCnt","_length","_EOL","_EOLLength","_EOLNormalized","lastNode","rbInsertRight","_searchCache","_lastVisitedLine","computeBufferMetadata","normalizeEOL","averageBufferSize","tempChunk","tempChunkLen","getNodeContent","replace","getEOL","setEOL","newEOL","createSnapshot","getOffsetAt","leftLen","getAccumulatedValue","getPositionAt","lfCnt","originalOffset","out","getValueInRange","startPosition","nodeAt2","endPosition","getValueInRange2","startOffset","offsetInBuffer","ret","substr","getLinesContent","currentLine","danglingCR","pieceLength","pieceStartLine","pieceEndLine","pieceStartOffset","getLength","getLineCount","getLineContent","getLineRawContent","_getCharCode","matchingNode","targetOffset","getLineCharCode","getLineLength","findMatchesInNode","searcher","startCursor","endCursor","searchData","captureMatches","limitResultCount","resultLen","result","startOffsetInBuffer","m","searchText","_wordSeparators","reset","positionInBuffer","getLineFeedCnt","retStartColumn","retEndColumn","createFindMatch","Range","findMatchesLineByLine","searchRange","Searcher","wordSeparators","regex","currentNode","lineBreakCnt","nextLineStartOffset","_findMatchesInLine","deltaOffset","simpleSearch","searchString","searchStringLen","textLength","lastMatchIndex","indexOf","isValidMatch","FindMatch","insert","nodeAt","insertPosInBuffer","appendToNode","insertContentToNodeLeft","nodesToDel","newRightPiece","shouldCheckCRLF","endWithCR","nodeCharCodeAt","newStart","startWithLF","previousPos","deleteNodeTail","newPieces","createNewPieces","tmpNode","k","deleteNodes","insertContentToNodeRight","pieces","rbInsertLeft","delete","cnt","startNode","endNode","startSplitPosInBuffer","endSplitPosInBuffer","validateCRLFWithPrevNode","deleteNodeHead","validateCRLFWithNextNode","shrinkNode","nPiece","newNode","adjustCarriageReturnFromNext","endOffset","previousCharOffset","cursor","nodes","lastChar","splitText","concat","slice","endIndex","endPos","newPiece","cache","prevAccumulatedValue","accumulatedValue","originalLineNumber","pos","lineCnt","realLineCnt","expectedLineStartIndex","originalLFCnt","originalEndOffset","newEnd","newEndOffset","newLineFeedCnt","size_delta","newLength","originalStartOffset","originalStartPos","originalEndPos","oldLength","oldLFCnt","hitCRLF","prevStartOffset","pop","oldLineFeedCnt","prevAccumualtedValue","offsetOfNode","newOffset","val","nextNode","fixCRLF","prevNewLength","prevNewLFCnt","callback","leftRet","p","prevNode","PieceTreeTextBuffer","Disposable","containsRTL","containsUnusualLineTerminators","super","_onDidChangeContent","_register","Emitter","_mightContainNonBasicASCII","_mightContainRTL","_mightContainUnusualLineTerminators","_pieceTree","mightContainRTL","mightContainUnusualLineTerminators","resetMightContainUnusualLineTerminators","mightContainNonBasicASCII","getBOM","preserveBOM","getRangeAt","isEmpty","lineEnding","_getEndOfLine","getValueLengthInRange","eolOffsetCompensation","desiredEOL","actualEOL","getCharacterCountInRange","fromLineNumber","toLineNumber","lineContent","fromOffset","toOffset","strings","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","Error","applyEdits","rawOperations","recordTrimAutoWhitespace","computeUndoEdits","canReduceOperations","operations","op","_isTracked","validatedRange","textMightContainNonBasicASCII","validText","eolCount","firstLineLength","lastLineLength","strEOL","countEOL","bufferEOL","sortIndex","identifier","rangeOffset","rangeLength","forceMoveMarkers","Boolean","isAutoWhitespaceEdit","sort","_sortOpsAscending","hasTouchingRanges","rangeEnd","getEndPosition","nextRangeStart","getStartPosition","isBeforeOrEqual","isBefore","_reduceOperations","reverseRanges","_getInverseEditRanges","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","oldContent","reverseOperations","reverseRangeDeltaOffset","bufferText","reverseRangeOffset","textChange","TextChange","a","b","contentChanges","_doApplyEdits","trimAutoWhitespaceLineNumbers","prevContent","fire","ApplyEditsResult","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","_sortOpsDescending","contentChangeRange","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lineCount","compareRangesUsingEnds","PieceTreeTextBufferFactory","_chunks","_bom","_cr","_lf","_crlf","_containsRTL","_containsUnusualLineTerminators","_isBasicASCII","_normalizeEOL","_getEOL","defaultEOL","totalEOLCount","totalCRCount","newLineStart","textBuffer","disposable","PieceTreeTextBufferBuilder","_hasPreviousChar","_previousChar","_tmpLineStarts","acceptChunk","chunk","_acceptChunk1","allowEmptyStrings","_acceptChunk2","String","fromCharCode","createLineStarts","finish","_finish","lastChunk","newLineStarts","TokenizerWithStateStore","tokenizationSupport","initialState","getInitialState","store","TrackingTokenizationStateStore","getStartState","getEndState","TokenizerWithStateStoreAndTextModel","_textModel","_languageIdCodec","updateTokensUntilLine","builder","languageId","getLanguageId","nextLineNumber","getFirstInvalidEndStateLineNumber","lineStartState","safeTokenize","add","tokens","setEndState","endState","getTokenTypeIfInsertingCharacter","character","lineTokens","LineTokens","getCount","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","tokenizeLineWithEdit","newText","curLineContent","newLineContent","getLanguageIdAtPosition","isCheapToTokenize","firstInvalidLineNumber","getFirstInvalidEndStateLineNumberOrMax","tokenizeHeuristically","heuristicTokens","state","guessStartState","nonWhitespaceColumn","likelyRelevantLines","newNonWhitespaceIndex","reverse","tokenizationStateStore","TokenizationStateStore","_invalidEndStatesLineNumbers","RangePriorityQueueImpl","addRange","OffsetRange","removeMin","acceptChange","newLineCount","addRangeAndResize","endLineNumberExclusive","acceptChanges","c","LineRange","invalidateEndStateRange","Number","MAX_SAFE_INTEGER","isTokenizationComplete","_lineEndStates","FixedArray","oldState","equals","_ranges","endExclusive","idxFirstMightBeIntersecting","idxFirstIsAfter","newRange","endEx","toString","map","languageIdCodec","hasEOL","tokenizeEncoded","clone","onUnexpectedError","nullTokenizeEncoded","encodeLanguageId","convertToEndOffset","DefaultBackgroundTokenizer","_tokenizerWithStateStore","_backgroundTokenStore","_isDisposed","_isScheduled","handleChanges","_beginBackgroundTokenization","isAttachedToEditor","_hasLinesToTokenize","runWhenIdle","deadline","_backgroundTokenizeWithDeadline","endTime","Date","now","timeRemaining","execute","_backgroundTokenizeForAtLeast1ms","setTimeout0","ContiguousMultilineTokensBuilder","sw","StopWatch","elapsed","_tokenizeOneInvalidLine","setTokens","finalize","checkFinished","backgroundTokenizationFinished","requestTokens","TokenizationTextModelPart","TextModelPart","_languageService","_languageConfigurationService","_bracketPairsTextModelPart","_languageId","_attachedViews","_semanticTokens","SparseTokensStore","_onDidChangeLanguage","onDidChangeLanguage","event","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","grammarTokens","GrammarTokens","onDidChange","affects","_emitModelTokensChangedEvent","onDidChangeBackgroundTokenizationState","handleDidChangeBackgroundTokenizationState","handleDidChangeContent","isFlush","flush","isEolChange","acceptEdit","handleDidChangeAttached","getLineTokens","validateLineNumber","syntacticTokens","addSparseTokens","_isDisposing","handleDidChangeTokens","BugIndicatingError","hasTokens","resetTokenization","backgroundTokenizationState","forceTokenization","tokenizeIfCheap","setSemanticTokens","isComplete","semanticTokensApplied","ranges","hasCompleteSemanticTokens","hasSomeSemanticTokens","setPartialSemanticTokens","changedRange","validateRange","setPartial","getWordAtPosition","_position","assertNotDisposed","validatePosition","rbStartOffset","rbEndOffset","_findLanguageBoundaries","rightBiasedWord","getWordAtText","getLanguageConfiguration","getWordDefinition","lbStartOffset","lbEndOffset","leftBiasedWord","getStartOffset","tokenCount","getEndOffset","getWordUntilPosition","wordAtPosition","word","setLanguageId","source","oldLanguage","newLanguage","handleDidChangeLanguage","_backgroundTokenizationState","attachedViews","_tokenizer","_defaultBackgroundTokenizer","_backgroundTokenizer","MutableDisposable","_tokens","ContiguousTokensStore","_debugBackgroundTokenizer","_onDidChangeBackgroundTokenizationState","_attachedViewStates","DisposableMap","TokenizationRegistry","changedLanguages","onDidChangeVisibleRanges","_ref","view","existing","AttachedViewHandler","refreshRanges","lineRanges","handleStateChange","deleteAndDispose","fireTokenChangeEvent","_a","_debugBackgroundTokens","_debugBackgroundStates","initializeTokenization","isTooLargeForTokenization","clear","_b","_c","firstInvalidEndStateLineNumber","createBackgroundTokenizer","backgroundTokenizerShouldOnlyVerifyTokens","setMultilineTokens","refreshAllVisibleLineTokens","joinMany","_ref2","_","s","refreshRange","changedTokens","lineText","getTokens","backgroundResult","reportMismatchingTokens","validatedPosition","_lineRanges","_refreshTokens","runner","RunOnceScheduler","update","_computedLineRanges","visibleLineRanges","stabilized","cancel","schedule","__decorate","decorators","target","key","desc","d","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","createTextBuffer","factory","createTextBufferFactory","model","snapshot","createTextBufferFactoryFromSnapshot","MODEL_ID","TextModelSnapshot","_source","_eos","resultCnt","resultLength","invalidFunc","TextModel","resolveOptions","options","detectIndentation","guessedIndentation","guessIndentation","tabSize","insertSpaces","indentSize","trimAutoWhitespace","bracketPairColorizationOptions","_tokenizationTextModelPart","onDidChangeContent","listener","_eventEmitter","slowEvent","contentChangedEvent","onDidChangeContentOrInjectedText","combinedDisposable","fastEvent","_onDidChangeInjectedText","__isDisposing","tokenization","bracketPairs","_bracketPairs","guides","_guidesTextModelPart","languageIdOrSelection","creationOptions","associatedResource","_undoRedoService","_onWillDispose","onWillDispose","_onDidChangeDecorations","DidChangeDecorationsEmitter","affectedInjectedTextLines","handleBeforeFireDecorationsChangedEvent","onDidChangeDecorations","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","DidChangeContentEmitter","_languageSelectionListener","_deltaDecorationCallCnt","AttachedViews","id","isForSimpleWidget","_associatedResource","URI","parse","_attachedEditorCount","_buffer","_bufferDisposable","_options","_setLanguage","BracketPairsTextModelPart","GuidesTextModelPart","_decorationProvider","ColorizedBracketPairsDecorationProvider","bufferLineCount","bufferTextLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","_MODEL_SYNC_LIMIT","_alternativeVersionId","_initialUndoRedoSnapshot","_instanceId","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","EditStack","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","beginDeferredEmit","endDeferredEmit","requestRichLanguageFeatures","emptyDisposedTextBuffer","None","_assertNotDisposed","_emitContentChangedEvent","rawChange","InternalModelContentChangeEvent","illegalArgument","_setValueFromTextBuffer","_createContentChanged2","isUndoing","isRedoing","getVersionId","textBufferDisposable","oldFullModelRange","getFullModelRange","oldModelValueLength","getLineMaxColumn","_increaseVersionId","ModelRawContentChangedEvent","ModelRawFlush","getValue","_onBeforeEOLChange","_onAfterEOLChange","ModelRawEOLChanged","ensureAllNodesHaveRanges","allDecorations","collectNodesPostOrder","cachedAbsoluteStart","cachedAbsoluteEnd","cachedVersionId","recomputeMaxEnd","onBeforeAttached","attachView","onBeforeDetached","detachView","getAttachedEditorCount","isTooLargeForSyncing","isDisposed","isDominatedByLongLines","smallLineCharCount","longLineCharCount","lineLength","getOptions","getFormattingOptions","updateOptions","_newOpts","originalIndentSize","bracketColorizationOptions","newOpts","createChangeEvent","handleDidChangeOptions","defaultInsertSpaces","defaultTabSize","normalizeIndentation","removeUnusualLineTerminators","selections","matches","findMatches","pushEditOperations","getAlternativeVersionId","getInitialUndoRedoSnapshot","rawPosition","_validatePosition","rawOffset","_overwriteVersionId","_overwriteAlternativeVersionId","newAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","newInitialUndoRedoSnapshot","fullModelRange","fullModelValue","getValueLength","rawRange","getEndOfLineSequence","getLineMinColumn","_validateRangeRelaxedNoAllocations","linesCount","initialStartLineNumber","initialStartColumn","isNaN","maxColumn","initialEndLineNumber","initialEndColumn","Selection","_isValidPosition","validationType","charCodeBefore","_lineNumber","_column","_isValidRange","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","modifyPosition","candidate","rawSearchScope","isRegex","matchCase","searchRanges","Array","isArray","every","searchScope","isIRange","d1","d2","uniqueSearchRanges","matchMapper","reduce","curr","areIntersecting","plusRange","SearchParams","parseSearchRequest","TextModelSearch","findNextMatch","rawSearchStart","searchStart","findPreviousMatch","pushStackElement","popStackElement","pushEOL","_validateEditOperation","rawOperation","_validateEditOperations","beforeCursorState","editOperations","cursorStateComputer","group","_pushEditOperations","incomingEdits","editsAreNearCursors","sel","foundEditNearSel","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","charAt","trimRange","pushEditOperation","_applyUndo","resultingAlternativeVersionId","resultingSelection","edits","rangeStart","newPosition","oldText","_applyUndoRedoEdits","_applyRedo","oldPosition","oldEnd","oldLineCount","acceptReplace","rawContentChanges","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","currentEditStartLineNumber","firstEditLineNumber","lastInsertedLineNumber","decorationsWithInjectedTextInEditedRange","getInjectedTextInInterval","injectedTextInEditedRange","LineInjectedText","fromDecorations","injectedTextInEditedRangeQueue","ArrayQueue","editLineNumber","currentEditLineNumber","takeFromEndWhile","decorationsInCurrentLine","ModelRawLineChanged","spliceStartLineNumber","ModelRawLinesDeleted","spliceLineNumber","injectedTexts","newLines","takeWhile","ModelRawLinesInserted","reverseEdits","undo","canUndo","redo","canRedo","size","lineChangeEvents","from","_getInjectedTextInLine","ModelInjectedTextChangedEvent","changeDecorations","ownerId","_changeDecorations","changeAccessor","addDecoration","_deltaDecorationsImpl","changeDecoration","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","console","warn","_getTrackedRange","getDecorationRange","_setTrackedRange","newStickiness","TRACKED_RANGE_OPTIONS","setOptions","removeAllDecorationsWithOwnerId","collectNodesFromOwner","getDecorationOptions","decorationId","getNodeRange","getLineDecorations","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","onlyMarginDecorations","decorations","_getDecorationsInRange","pushMany","getDecorationsInRange","onlyMinimapDecorations","getOverviewRulerDecorations","getAll","getInjectedTextDecorations","getAllInjectedText","filter","t","getAllDecorations","getAllMarginDecorations","filterRange","filterOwnerId","getAllInInterval","after","oldRange","recordLineAffectedByInjectedText","before","checkAffectedAndFire","nodeWasInOverviewRuler","overviewRuler","nodeIsInOverviewRuler","nodeRange","oldDecorationsIds","suppressEvents","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","IntervalNode","newDecoration","setLanguage","normalizePosition","affinity","getLineIndentColumn","indent","indentOfLine","isNodeInOverviewRuler","isNodeInjectedText","DEFAULT_CREATION_OPTIONS","EDITOR_MODEL_DEFAULTS","IUndoRedoService","ILanguageService","ILanguageConfigurationService","_decorationsTree0","IntervalTree","_decorationsTree1","_injectedTextDecorationsTree","host","_ensureNodesHaveRanges","_intervalSearch","r0","intervalSearch","r1","r2","showIfCollapsed","search","overviewRulerOnly","_search","_resolveNode","resolveNode","cleanClassName","className","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_resolvedColor","Center","getColor","theme","type","_resolveColor","invalidateCachedColor","ModelDecorationGlyphMarginOptions","Left","ModelDecorationMinimapOptions","Color","fromHex","ModelDecorationInjectedTextOptions","content","inlineClassName","inlineClassNameAffectsLetterSpacing","attachedData","cursorStops","ModelDecorationOptions","register","createDynamic","_d","_e","description","blockClassName","blockDoesNotCollapse","blockIsAfterEnd","blockPadding","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","collapseOnReplaceEdit","minimap","glyphMargin","glyphMarginClassName","linesDecorationsClassName","firstLineDecorationClassName","marginClassName","beforeContentClassName","afterContentClassName","hideInCommentTokens","hideInStringTokens","EMPTY","handleBeforeFire","_actual","_affectedInjectedTextLines","_deferredCnt","_shouldFireDeferred","_affectsMinimap","_affectsOverviewRuler","_affectsGlyphMargin","doFire","Set","tryFire","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","_fastEmitter","_slowEmitter","_deferredEvent","rawContentChangedEvent","merge","_onDidChangeVisibleRanges","_views","AttachedViewImpl","setVisibleLines","visibleLines","multiline","chCode","nextChCode","isMultilineRegexSource","wholeWord","global","unicode","err","canUseSimpleSearch","toLowerCase","toUpperCase","SearchData","getMapForWordSeparators","rawMatches","LineFeedCounter","lineFeedsOffsets","lineFeedsOffsetsLen","textLen","_lineFeedsOffsets","findLineFeedCountBeforeOffset","searchParams","_doFindMatchesMultiline","_doFindMatchesLineByLine","_getMultilineMatchRange","lfCounter","matchIndex","match0","lineFeedCountBeforeMatch","lineFeedCountInMatch","counter","_doFindNextMatchMultiline","_doFindNextMatchLineByLine","searchTextStart","_findFirstMatchInLine","fromColumn","_doFindPreviousMatchMultiline","_doFindPreviousMatchLineByLine","_findLastMatchInLine","bestResult","matchStartIndex","matchLength","charBefore","firstCharInMatch","leftIsWordBounday","charAfter","lastCharInMatch","rightIsWordBounday","searchRegex","_searchRegex","_prevMatchStartIndex","_prevMatchLength","lastIndex","exec","computeIndentLevel"],"sourceRoot":""}